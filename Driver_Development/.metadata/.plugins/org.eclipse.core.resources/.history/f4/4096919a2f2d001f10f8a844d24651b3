/*
 * stm32f446re_gpio.h
 *
 *  Created on: Jun 17, 2024
 *      Author: Chait
 */

#ifndef INC_STM32F446RE_GPIO_H_
#define INC_STM32F446RE_GPIO_H_

#include <stdio.h>
#include <stdint.h>

#define GPIOA_BASE_ADDR			0x40020000UL
#define GPIOB_BASE_ADDR			0x40020400UL
#define GPIOC_BASE_ADDR			0x40020800UL
#define GPIOD_BASE_ADDR			0x40020C00UL
#define GPIOE_BASE_ADDR			0x40021000UL
#define GPIOF_BASE_ADDR			0x40021400UL
#define GPIOG_BASE_ADDR			0x40021800UL
#define GPIOH_BASE_ADDR			0x40021C00UL

/*APB1 peripherals*/
#define RCC_BASE_ADDR			0x40023800UL
#define CRC_BASE_ADDR			0x40023000UL


/*APB2 peripherals*/
#define EXTI_BASE_ADDR			0x40013C00UL


/* Structure Registers of GPIO*/
typedef struct
{
	volatile uint32_t GPIOx_MODER;
	volatile uint32_t GPIOx_OTYPER;
	volatile uint32_t GPIOx_OSPEEDR;
	volatile uint32_t GPIOx_PUPDR;
	volatile uint32_t GPIOx_IDR;
	volatile uint32_t GPIOx_ODR;
	volatile uint32_t GPIOx_BSRR;
	volatile uint32_t GPIOx_LCKR;
	volatile uint32_t GPIOx_AFRL;
	volatile uint32_t GPIOx_AFRH;
}GPIO_RegDef_t;

#define GPIOA		(GPIO_RegDef_t*)GPIOA_BASE_ADDR
#define GPIOB		(GPIO_RegDef_t*)GPIOB_BASE_ADDR
#define GPIOC		(GPIO_RegDef_t*)GPIOC_BASE_ADDR
#define GPIOD		(GPIO_RegDef_t*)GPIOD_BASE_ADDR
#define GPIOE		(GPIO_RegDef_t*)GPIOE_BASE_ADDR
#define GPIOF		(GPIO_RegDef_t*)GPIOF_BASE_ADDR
#define GPIOG		(GPIO_RegDef_t*)GPIOG_BASE_ADDR
#define GPIOH		(GPIO_RegDef_t*)GPIOH_BASE_ADDR

/*
GPIO_RegDef_t *pGPIOA = GPIOA;
GPIO_RegDef_t *pGPIOB = GPIOB;
GPIO_RegDef_t *pGPIOC = GPIOC;
GPIO_RegDef_t *pGPIOD = GPIOD;
GPIO_RegDef_t *pGPIOE = GPIOE;
GPIO_RegDef_t *pGPIOF = GPIOF;
GPIO_RegDef_t *pGPIOG = GPIOG;
GPIO_RegDef_t *pGPIOH = GPIOH;
*/

typedef struct
{
	volatile uint32_t RCC_CR;
	volatile uint32_t RCC_PLLCFGR;
	volatile uint32_t RCC_CFGR;
	volatile uint32_t RCC_CIR;
	volatile uint32_t RCC_AHB1RSTR;
	volatile uint32_t RCC_AHB2RSTR;
	volatile uint32_t RCC_AHB3RSTR;
	volatile uint32_t RCC_APB1RSTR;
	volatile uint32_t RCC_APB2RSTR;
	volatile uint32_t RCC_RESERVED0;
	volatile uint32_t RCC_RESERVED1;
	volatile uint32_t RCC_AHB1ENR;
	volatile uint32_t RCC_AHB2ENR;
	volatile uint32_t RCC_AHB3ENR;
	volatile uint32_t RCC_RESERVED2;
	volatile uint32_t RCC_APB1ENR;
	volatile uint32_t RCC_APB2ENR;
	volatile uint32_t RCC_RESERVED3;
	volatile uint32_t RCC_RESERVED4;
	volatile uint32_t RCC_AHB1LPENR;
	volatile uint32_t RCC_AHB2LPENR;
	volatile uint32_t RCC_AHB3LPENR;
	volatile uint32_t RCC_RESERVED5;
	volatile uint32_t RCC_APB1LPENR;
	volatile uint32_t RCC_APB2LPENR;
	volatile uint32_t RCC_RESERVED6;
	volatile uint32_t RCC_RESERVED7;
	volatile uint32_t RCC_BDCR;
	volatile uint32_t RCC_CSR;
	volatile uint32_t RCC_RESERVED8;
	volatile uint32_t RCC_RESERVED9;
	volatile uint32_t RCC_SSCGR;
	volatile uint32_t RCC_PLLI2SCFGR;
	volatile uint32_t RCC_PLLSAICFGR;
	volatile uint32_t RCC_DCKCFGR;
	volatile uint32_t CKGATENR;
	volatile uint32_t DCKCFGR2;
}RCC_RegDef_t;

#define RCC		((RCC_RegDef_t*)RCC_BASE_ADDR)

#define GPIOA_CLK_ENABLE()		((RCC->RCC_AHB1ENR)|= (1<<0))
#define GPIOB_CLK_ENABLE()		((RCC->RCC_AHB1ENR)|= (1<<1))
#define GPIOC_CLK_ENABLE()		((RCC->RCC_AHB1ENR)|= (1<<2))
#define GPIOD_CLK_ENABLE()		((RCC->RCC_AHB1ENR)|= (1<<3))
#define GPIOE_CLK_ENABLE()		((RCC->RCC_AHB1ENR)|= (1<<4))
#define GPIOF_CLK_ENABLE()		((RCC->RCC_AHB1ENR)|= (1<<5))
#define GPIOG_CLK_ENABLE()		((RCC->RCC_AHB1ENR)|= (1<<6))
#define GPIOH_CLK_ENABLE()		((RCC->RCC_AHB1ENR)|= (1<<7))

#endif /* INC_STM32F446RE_GPIO_H_ */
