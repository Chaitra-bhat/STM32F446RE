
stm32f446re_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012a0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001464  08001464  00002464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001484  08001484  0000305c  2**0
                  CONTENTS
  4 .ARM          00000000  08001484  08001484  0000305c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001484  08001484  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001484  08001484  00002484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001488  08001488  00002488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800148c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  080014e8  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080014e8  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001316  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000052b  00000000  00000000  0000439c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b0  00000000  00000000  000048c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000137  00000000  00000000  00004a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000032e1  00000000  00000000  00004baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002ce5  00000000  00000000  00007e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000ae14  00000000  00000000  0000ab75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00015989  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bdc  00000000  00000000  000159cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000165a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000005c 	.word	0x2000005c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800144c 	.word	0x0800144c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000060 	.word	0x20000060
 8000200:	0800144c 	.word	0x0800144c

08000204 <GPIO_Init>:
 * Name: GPIO_Init
 * Parameter a: Base address and Pin details - Handle input
 * Parameter b: None
 * Return Type: Void
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	/* Configure the mode*/
	if(pGPIOHandle->GPIOPinConfig.PinMode <= GPIO_MODE_ANALOG)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	795b      	ldrb	r3, [r3, #5]
 8000210:	2b03      	cmp	r3, #3
 8000212:	d81e      	bhi.n	8000252 <GPIO_Init+0x4e>
	{
		pGPIOHandle->pGPIOx->GPIOx_MODER &= ~(0x3 << pGPIOHandle->GPIOPinConfig.PinNumber);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	681a      	ldr	r2, [r3, #0]
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	791b      	ldrb	r3, [r3, #4]
 800021e:	4619      	mov	r1, r3
 8000220:	2303      	movs	r3, #3
 8000222:	408b      	lsls	r3, r1
 8000224:	43db      	mvns	r3, r3
 8000226:	4619      	mov	r1, r3
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	400a      	ands	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->GPIOx_MODER |= (pGPIOHandle->GPIOPinConfig.PinMode << (2*pGPIOHandle->GPIOPinConfig.PinNumber));
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	795b      	ldrb	r3, [r3, #5]
 800023a:	4619      	mov	r1, r3
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	791b      	ldrb	r3, [r3, #4]
 8000240:	005b      	lsls	r3, r3, #1
 8000242:	fa01 f303 	lsl.w	r3, r1, r3
 8000246:	4619      	mov	r1, r3
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	430a      	orrs	r2, r1
 800024e:	601a      	str	r2, [r3, #0]
 8000250:	e0b6      	b.n	80003c0 <GPIO_Init+0x1bc>
	}
	else
	{
		if(pGPIOHandle->GPIOPinConfig.PinMode == GPIO_MODE_IT_FE)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	795b      	ldrb	r3, [r3, #5]
 8000256:	2b04      	cmp	r3, #4
 8000258:	d117      	bne.n	800028a <GPIO_Init+0x86>
		{
			//configure FTSR register
			EXTI->EXTI_FTSR |= (1<<pGPIOHandle->GPIOPinConfig.PinNumber);
 800025a:	4b9b      	ldr	r3, [pc, #620]	@ (80004c8 <GPIO_Init+0x2c4>)
 800025c:	68db      	ldr	r3, [r3, #12]
 800025e:	687a      	ldr	r2, [r7, #4]
 8000260:	7912      	ldrb	r2, [r2, #4]
 8000262:	4611      	mov	r1, r2
 8000264:	2201      	movs	r2, #1
 8000266:	408a      	lsls	r2, r1
 8000268:	4611      	mov	r1, r2
 800026a:	4a97      	ldr	r2, [pc, #604]	@ (80004c8 <GPIO_Init+0x2c4>)
 800026c:	430b      	orrs	r3, r1
 800026e:	60d3      	str	r3, [r2, #12]

			//Clear RTSR bit
			EXTI->EXTI_RTSR &= ~(1<<pGPIOHandle->GPIOPinConfig.PinNumber);
 8000270:	4b95      	ldr	r3, [pc, #596]	@ (80004c8 <GPIO_Init+0x2c4>)
 8000272:	689b      	ldr	r3, [r3, #8]
 8000274:	687a      	ldr	r2, [r7, #4]
 8000276:	7912      	ldrb	r2, [r2, #4]
 8000278:	4611      	mov	r1, r2
 800027a:	2201      	movs	r2, #1
 800027c:	408a      	lsls	r2, r1
 800027e:	43d2      	mvns	r2, r2
 8000280:	4611      	mov	r1, r2
 8000282:	4a91      	ldr	r2, [pc, #580]	@ (80004c8 <GPIO_Init+0x2c4>)
 8000284:	400b      	ands	r3, r1
 8000286:	6093      	str	r3, [r2, #8]
 8000288:	e035      	b.n	80002f6 <GPIO_Init+0xf2>

		}
		else if(pGPIOHandle->GPIOPinConfig.PinMode == GPIO_MODE_IT_RE)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	795b      	ldrb	r3, [r3, #5]
 800028e:	2b05      	cmp	r3, #5
 8000290:	d117      	bne.n	80002c2 <GPIO_Init+0xbe>
		{
			//Configure RSTR register
			EXTI->EXTI_RTSR |= (1<<pGPIOHandle->GPIOPinConfig.PinNumber);
 8000292:	4b8d      	ldr	r3, [pc, #564]	@ (80004c8 <GPIO_Init+0x2c4>)
 8000294:	689b      	ldr	r3, [r3, #8]
 8000296:	687a      	ldr	r2, [r7, #4]
 8000298:	7912      	ldrb	r2, [r2, #4]
 800029a:	4611      	mov	r1, r2
 800029c:	2201      	movs	r2, #1
 800029e:	408a      	lsls	r2, r1
 80002a0:	4611      	mov	r1, r2
 80002a2:	4a89      	ldr	r2, [pc, #548]	@ (80004c8 <GPIO_Init+0x2c4>)
 80002a4:	430b      	orrs	r3, r1
 80002a6:	6093      	str	r3, [r2, #8]

			EXTI->EXTI_FTSR &= ~(1<<pGPIOHandle->GPIOPinConfig.PinNumber);
 80002a8:	4b87      	ldr	r3, [pc, #540]	@ (80004c8 <GPIO_Init+0x2c4>)
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	687a      	ldr	r2, [r7, #4]
 80002ae:	7912      	ldrb	r2, [r2, #4]
 80002b0:	4611      	mov	r1, r2
 80002b2:	2201      	movs	r2, #1
 80002b4:	408a      	lsls	r2, r1
 80002b6:	43d2      	mvns	r2, r2
 80002b8:	4611      	mov	r1, r2
 80002ba:	4a83      	ldr	r2, [pc, #524]	@ (80004c8 <GPIO_Init+0x2c4>)
 80002bc:	400b      	ands	r3, r1
 80002be:	60d3      	str	r3, [r2, #12]
 80002c0:	e019      	b.n	80002f6 <GPIO_Init+0xf2>
		}
		else if(pGPIOHandle->GPIOPinConfig.PinMode == GPIO_MODE_IT_RE_FE)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	795b      	ldrb	r3, [r3, #5]
 80002c6:	2b06      	cmp	r3, #6
 80002c8:	d115      	bne.n	80002f6 <GPIO_Init+0xf2>
		{
			// Configure FTSR and RSTR register

			EXTI->EXTI_RTSR |= (1<<pGPIOHandle->GPIOPinConfig.PinNumber);
 80002ca:	4b7f      	ldr	r3, [pc, #508]	@ (80004c8 <GPIO_Init+0x2c4>)
 80002cc:	689b      	ldr	r3, [r3, #8]
 80002ce:	687a      	ldr	r2, [r7, #4]
 80002d0:	7912      	ldrb	r2, [r2, #4]
 80002d2:	4611      	mov	r1, r2
 80002d4:	2201      	movs	r2, #1
 80002d6:	408a      	lsls	r2, r1
 80002d8:	4611      	mov	r1, r2
 80002da:	4a7b      	ldr	r2, [pc, #492]	@ (80004c8 <GPIO_Init+0x2c4>)
 80002dc:	430b      	orrs	r3, r1
 80002de:	6093      	str	r3, [r2, #8]

			EXTI->EXTI_FTSR |= (1<<pGPIOHandle->GPIOPinConfig.PinNumber);
 80002e0:	4b79      	ldr	r3, [pc, #484]	@ (80004c8 <GPIO_Init+0x2c4>)
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	7912      	ldrb	r2, [r2, #4]
 80002e8:	4611      	mov	r1, r2
 80002ea:	2201      	movs	r2, #1
 80002ec:	408a      	lsls	r2, r1
 80002ee:	4611      	mov	r1, r2
 80002f0:	4a75      	ldr	r2, [pc, #468]	@ (80004c8 <GPIO_Init+0x2c4>)
 80002f2:	430b      	orrs	r3, r1
 80002f4:	60d3      	str	r3, [r2, #12]
		}

		uint8_t temp1 = (pGPIOHandle->GPIOPinConfig.PinNumber)/4;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	791b      	ldrb	r3, [r3, #4]
 80002fa:	089b      	lsrs	r3, r3, #2
 80002fc:	73fb      	strb	r3, [r7, #15]
		uint8_t temp2 = (pGPIOHandle->GPIOPinConfig.PinNumber)%4;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	791b      	ldrb	r3, [r3, #4]
 8000302:	f003 0303 	and.w	r3, r3, #3
 8000306:	73bb      	strb	r3, [r7, #14]
		uint8_t portcode = GPIO_BASEADRR_TO_CODE(pGPIOHandle->pGPIOx);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a6f      	ldr	r2, [pc, #444]	@ (80004cc <GPIO_Init+0x2c8>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d032      	beq.n	8000378 <GPIO_Init+0x174>
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4a6e      	ldr	r2, [pc, #440]	@ (80004d0 <GPIO_Init+0x2cc>)
 8000318:	4293      	cmp	r3, r2
 800031a:	d02b      	beq.n	8000374 <GPIO_Init+0x170>
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a6c      	ldr	r2, [pc, #432]	@ (80004d4 <GPIO_Init+0x2d0>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d024      	beq.n	8000370 <GPIO_Init+0x16c>
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a6b      	ldr	r2, [pc, #428]	@ (80004d8 <GPIO_Init+0x2d4>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d01d      	beq.n	800036c <GPIO_Init+0x168>
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a69      	ldr	r2, [pc, #420]	@ (80004dc <GPIO_Init+0x2d8>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d016      	beq.n	8000368 <GPIO_Init+0x164>
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a68      	ldr	r2, [pc, #416]	@ (80004e0 <GPIO_Init+0x2dc>)
 8000340:	4293      	cmp	r3, r2
 8000342:	d00f      	beq.n	8000364 <GPIO_Init+0x160>
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a66      	ldr	r2, [pc, #408]	@ (80004e4 <GPIO_Init+0x2e0>)
 800034a:	4293      	cmp	r3, r2
 800034c:	d008      	beq.n	8000360 <GPIO_Init+0x15c>
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4a65      	ldr	r2, [pc, #404]	@ (80004e8 <GPIO_Init+0x2e4>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d101      	bne.n	800035c <GPIO_Init+0x158>
 8000358:	2307      	movs	r3, #7
 800035a:	e00e      	b.n	800037a <GPIO_Init+0x176>
 800035c:	2300      	movs	r3, #0
 800035e:	e00c      	b.n	800037a <GPIO_Init+0x176>
 8000360:	2306      	movs	r3, #6
 8000362:	e00a      	b.n	800037a <GPIO_Init+0x176>
 8000364:	2305      	movs	r3, #5
 8000366:	e008      	b.n	800037a <GPIO_Init+0x176>
 8000368:	2304      	movs	r3, #4
 800036a:	e006      	b.n	800037a <GPIO_Init+0x176>
 800036c:	2303      	movs	r3, #3
 800036e:	e004      	b.n	800037a <GPIO_Init+0x176>
 8000370:	2302      	movs	r3, #2
 8000372:	e002      	b.n	800037a <GPIO_Init+0x176>
 8000374:	2301      	movs	r3, #1
 8000376:	e000      	b.n	800037a <GPIO_Init+0x176>
 8000378:	2300      	movs	r3, #0
 800037a:	737b      	strb	r3, [r7, #13]

		SYSCONFIG->SYSCFG_EXTICR[temp1] |= portcode<<(temp2*4);
 800037c:	4a5b      	ldr	r2, [pc, #364]	@ (80004ec <GPIO_Init+0x2e8>)
 800037e:	7bfb      	ldrb	r3, [r7, #15]
 8000380:	3302      	adds	r3, #2
 8000382:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000386:	7b79      	ldrb	r1, [r7, #13]
 8000388:	7bbb      	ldrb	r3, [r7, #14]
 800038a:	009b      	lsls	r3, r3, #2
 800038c:	fa01 f303 	lsl.w	r3, r1, r3
 8000390:	4618      	mov	r0, r3
 8000392:	4956      	ldr	r1, [pc, #344]	@ (80004ec <GPIO_Init+0x2e8>)
 8000394:	7bfb      	ldrb	r3, [r7, #15]
 8000396:	4302      	orrs	r2, r0
 8000398:	3302      	adds	r3, #2
 800039a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		SYSCONFIG_CLK_EN();
 800039e:	4b54      	ldr	r3, [pc, #336]	@ (80004f0 <GPIO_Init+0x2ec>)
 80003a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003a2:	4a53      	ldr	r2, [pc, #332]	@ (80004f0 <GPIO_Init+0x2ec>)
 80003a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003a8:	6453      	str	r3, [r2, #68]	@ 0x44
		EXTI->EXTI_IMR |= (1<<pGPIOHandle->GPIOPinConfig.PinNumber);
 80003aa:	4b47      	ldr	r3, [pc, #284]	@ (80004c8 <GPIO_Init+0x2c4>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	687a      	ldr	r2, [r7, #4]
 80003b0:	7912      	ldrb	r2, [r2, #4]
 80003b2:	4611      	mov	r1, r2
 80003b4:	2201      	movs	r2, #1
 80003b6:	408a      	lsls	r2, r1
 80003b8:	4611      	mov	r1, r2
 80003ba:	4a43      	ldr	r2, [pc, #268]	@ (80004c8 <GPIO_Init+0x2c4>)
 80003bc:	430b      	orrs	r3, r1
 80003be:	6013      	str	r3, [r2, #0]
	}

	/*Configure the speed*/
	pGPIOHandle->pGPIOx->GPIOx_OSPEEDR &= ~(0x3 << pGPIOHandle->GPIOPinConfig.PinNumber);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	689a      	ldr	r2, [r3, #8]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	791b      	ldrb	r3, [r3, #4]
 80003ca:	4619      	mov	r1, r3
 80003cc:	2303      	movs	r3, #3
 80003ce:	408b      	lsls	r3, r1
 80003d0:	43db      	mvns	r3, r3
 80003d2:	4619      	mov	r1, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	400a      	ands	r2, r1
 80003da:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->GPIOx_OSPEEDR |= (pGPIOHandle->GPIOPinConfig.PinSpeed << (2*pGPIOHandle->GPIOPinConfig.PinNumber));
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	689a      	ldr	r2, [r3, #8]
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	799b      	ldrb	r3, [r3, #6]
 80003e6:	4619      	mov	r1, r3
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	791b      	ldrb	r3, [r3, #4]
 80003ec:	005b      	lsls	r3, r3, #1
 80003ee:	fa01 f303 	lsl.w	r3, r1, r3
 80003f2:	4619      	mov	r1, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	430a      	orrs	r2, r1
 80003fa:	609a      	str	r2, [r3, #8]

	/*Configure Pull up or Pull down*/
	pGPIOHandle->pGPIOx->GPIOx_PUPDR &= ~(0x3 << pGPIOHandle->GPIOPinConfig.PinNumber);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	68da      	ldr	r2, [r3, #12]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	791b      	ldrb	r3, [r3, #4]
 8000406:	4619      	mov	r1, r3
 8000408:	2303      	movs	r3, #3
 800040a:	408b      	lsls	r3, r1
 800040c:	43db      	mvns	r3, r3
 800040e:	4619      	mov	r1, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	400a      	ands	r2, r1
 8000416:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->GPIOx_PUPDR |= (pGPIOHandle->GPIOPinConfig.PinPuPdControl << (2*pGPIOHandle->GPIOPinConfig.PinNumber));
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	68da      	ldr	r2, [r3, #12]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	79db      	ldrb	r3, [r3, #7]
 8000422:	4619      	mov	r1, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	791b      	ldrb	r3, [r3, #4]
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	fa01 f303 	lsl.w	r3, r1, r3
 800042e:	4619      	mov	r1, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	430a      	orrs	r2, r1
 8000436:	60da      	str	r2, [r3, #12]

	/*Configure output type*/
	pGPIOHandle->pGPIOx->GPIOx_OTYPER &= ~(1 << pGPIOHandle->GPIOPinConfig.PinNumber);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	685a      	ldr	r2, [r3, #4]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	791b      	ldrb	r3, [r3, #4]
 8000442:	4619      	mov	r1, r3
 8000444:	2301      	movs	r3, #1
 8000446:	408b      	lsls	r3, r1
 8000448:	43db      	mvns	r3, r3
 800044a:	4619      	mov	r1, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	400a      	ands	r2, r1
 8000452:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->GPIOx_OTYPER |= (pGPIOHandle->GPIOPinConfig.PinOPType << pGPIOHandle->GPIOPinConfig.PinNumber);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	685a      	ldr	r2, [r3, #4]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	7a1b      	ldrb	r3, [r3, #8]
 800045e:	4619      	mov	r1, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	791b      	ldrb	r3, [r3, #4]
 8000464:	fa01 f303 	lsl.w	r3, r1, r3
 8000468:	4619      	mov	r1, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	430a      	orrs	r2, r1
 8000470:	605a      	str	r2, [r3, #4]

	/*Configure for altfunc mode*/
	if(pGPIOHandle->GPIOPinConfig.PinAltFunMode == GPIO_MODE_ALTFUN)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	7a5b      	ldrb	r3, [r3, #9]
 8000476:	2b02      	cmp	r3, #2
 8000478:	d161      	bne.n	800053e <GPIO_Init+0x33a>
	{
		uint32_t temp1;
		temp1 = (pGPIOHandle->GPIOPinConfig.PinNumber % 8);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	791b      	ldrb	r3, [r3, #4]
 800047e:	f003 0307 	and.w	r3, r3, #7
 8000482:	60bb      	str	r3, [r7, #8]
		if(pGPIOHandle->GPIOPinConfig.PinNumber <= GPIO_PINNUMBER_7)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	791b      	ldrb	r3, [r3, #4]
 8000488:	2b07      	cmp	r3, #7
 800048a:	d833      	bhi.n	80004f4 <GPIO_Init+0x2f0>
		{
			pGPIOHandle->pGPIOx->GPIOx_AFRL &= ~(0xF << pGPIOHandle->GPIOPinConfig.PinNumber);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	6a1a      	ldr	r2, [r3, #32]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	791b      	ldrb	r3, [r3, #4]
 8000496:	4619      	mov	r1, r3
 8000498:	230f      	movs	r3, #15
 800049a:	408b      	lsls	r3, r1
 800049c:	43db      	mvns	r3, r3
 800049e:	4619      	mov	r1, r3
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	400a      	ands	r2, r1
 80004a6:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->GPIOx_AFRL |= (pGPIOHandle->GPIOPinConfig.PinAltFunMode << 4*temp1);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	6a1a      	ldr	r2, [r3, #32]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	7a5b      	ldrb	r3, [r3, #9]
 80004b2:	4619      	mov	r1, r3
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	fa01 f303 	lsl.w	r3, r1, r3
 80004bc:	4619      	mov	r1, r3
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	430a      	orrs	r2, r1
 80004c4:	621a      	str	r2, [r3, #32]
			/*Do Nothing*/
		}

	}

}
 80004c6:	e03a      	b.n	800053e <GPIO_Init+0x33a>
 80004c8:	40013c00 	.word	0x40013c00
 80004cc:	40020000 	.word	0x40020000
 80004d0:	40020400 	.word	0x40020400
 80004d4:	40020800 	.word	0x40020800
 80004d8:	40020c00 	.word	0x40020c00
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40021400 	.word	0x40021400
 80004e4:	40021800 	.word	0x40021800
 80004e8:	40021c00 	.word	0x40021c00
 80004ec:	40013800 	.word	0x40013800
 80004f0:	40023800 	.word	0x40023800
		else if((pGPIOHandle->GPIOPinConfig.PinNumber) > GPIO_PINNUMBER_7 && (pGPIOHandle->GPIOPinConfig.PinNumber)<= GPIO_PINNUMBER_15)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	791b      	ldrb	r3, [r3, #4]
 80004f8:	2b07      	cmp	r3, #7
 80004fa:	d920      	bls.n	800053e <GPIO_Init+0x33a>
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	791b      	ldrb	r3, [r3, #4]
 8000500:	2b0f      	cmp	r3, #15
 8000502:	d81c      	bhi.n	800053e <GPIO_Init+0x33a>
			pGPIOHandle->pGPIOx->GPIOx_AFRH &= ~(0xF << pGPIOHandle->GPIOPinConfig.PinNumber);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	791b      	ldrb	r3, [r3, #4]
 800050e:	4619      	mov	r1, r3
 8000510:	230f      	movs	r3, #15
 8000512:	408b      	lsls	r3, r1
 8000514:	43db      	mvns	r3, r3
 8000516:	4619      	mov	r1, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	400a      	ands	r2, r1
 800051e:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle->pGPIOx->GPIOx_AFRH |= (pGPIOHandle->GPIOPinConfig.PinAltFunMode << 4*temp1);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	7a5b      	ldrb	r3, [r3, #9]
 800052a:	4619      	mov	r1, r3
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	fa01 f303 	lsl.w	r3, r1, r3
 8000534:	4619      	mov	r1, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	430a      	orrs	r2, r1
 800053c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr

08000548 <GPIO_PeriClkEnable>:
 * Parameter a: Base address of the GPIO Port Eg: GPIOA
 * Parameter b: Input to whether enable or disable
 * Parameter c: None
 * Return Type: Void
 */
void GPIO_PeriClkEnable(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	460b      	mov	r3, r1
 8000552:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000554:	78fb      	ldrb	r3, [r7, #3]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d15b      	bne.n	8000612 <GPIO_PeriClkEnable+0xca>
		if (pGPIOx == GPIOA) {
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4a60      	ldr	r2, [pc, #384]	@ (80006e0 <GPIO_PeriClkEnable+0x198>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d106      	bne.n	8000570 <GPIO_PeriClkEnable+0x28>
			GPIOA_CLK_ENABLE();
 8000562:	4b60      	ldr	r3, [pc, #384]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	4a5f      	ldr	r2, [pc, #380]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	6313      	str	r3, [r2, #48]	@ 0x30
			printf("Invalid Port\n");
		}
	} else {
		printf("Invalid Input\n");
	}
}
 800056e:	e0b2      	b.n	80006d6 <GPIO_PeriClkEnable+0x18e>
		} else if (pGPIOx == GPIOB) {
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a5d      	ldr	r2, [pc, #372]	@ (80006e8 <GPIO_PeriClkEnable+0x1a0>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d106      	bne.n	8000586 <GPIO_PeriClkEnable+0x3e>
			GPIOB_CLK_ENABLE();
 8000578:	4b5a      	ldr	r3, [pc, #360]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 800057a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057c:	4a59      	ldr	r2, [pc, #356]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 800057e:	f043 0302 	orr.w	r3, r3, #2
 8000582:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000584:	e0a7      	b.n	80006d6 <GPIO_PeriClkEnable+0x18e>
		} else if (pGPIOx == GPIOC) {
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4a58      	ldr	r2, [pc, #352]	@ (80006ec <GPIO_PeriClkEnable+0x1a4>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d106      	bne.n	800059c <GPIO_PeriClkEnable+0x54>
			GPIOC_CLK_ENABLE();
 800058e:	4b55      	ldr	r3, [pc, #340]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	4a54      	ldr	r2, [pc, #336]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 8000594:	f043 0304 	orr.w	r3, r3, #4
 8000598:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800059a:	e09c      	b.n	80006d6 <GPIO_PeriClkEnable+0x18e>
		} else if (pGPIOx == GPIOD) {
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4a54      	ldr	r2, [pc, #336]	@ (80006f0 <GPIO_PeriClkEnable+0x1a8>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d106      	bne.n	80005b2 <GPIO_PeriClkEnable+0x6a>
			GPIOD_CLK_ENABLE();
 80005a4:	4b4f      	ldr	r3, [pc, #316]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 80005a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a8:	4a4e      	ldr	r2, [pc, #312]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 80005aa:	f043 0308 	orr.w	r3, r3, #8
 80005ae:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005b0:	e091      	b.n	80006d6 <GPIO_PeriClkEnable+0x18e>
		} else if (pGPIOx == GPIOE) {
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a4f      	ldr	r2, [pc, #316]	@ (80006f4 <GPIO_PeriClkEnable+0x1ac>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d106      	bne.n	80005c8 <GPIO_PeriClkEnable+0x80>
			GPIOE_CLK_ENABLE();
 80005ba:	4b4a      	ldr	r3, [pc, #296]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	4a49      	ldr	r2, [pc, #292]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 80005c0:	f043 0310 	orr.w	r3, r3, #16
 80005c4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005c6:	e086      	b.n	80006d6 <GPIO_PeriClkEnable+0x18e>
		} else if (pGPIOx == GPIOF) {
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a4b      	ldr	r2, [pc, #300]	@ (80006f8 <GPIO_PeriClkEnable+0x1b0>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d106      	bne.n	80005de <GPIO_PeriClkEnable+0x96>
			GPIOF_CLK_ENABLE();
 80005d0:	4b44      	ldr	r3, [pc, #272]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 80005d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d4:	4a43      	ldr	r2, [pc, #268]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 80005d6:	f043 0320 	orr.w	r3, r3, #32
 80005da:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005dc:	e07b      	b.n	80006d6 <GPIO_PeriClkEnable+0x18e>
		} else if (pGPIOx == GPIOG) {
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a46      	ldr	r2, [pc, #280]	@ (80006fc <GPIO_PeriClkEnable+0x1b4>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d106      	bne.n	80005f4 <GPIO_PeriClkEnable+0xac>
			GPIOG_CLK_ENABLE();
 80005e6:	4b3f      	ldr	r3, [pc, #252]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a3e      	ldr	r2, [pc, #248]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 80005ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005f2:	e070      	b.n	80006d6 <GPIO_PeriClkEnable+0x18e>
		} else if (pGPIOx == GPIOH) {
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a42      	ldr	r2, [pc, #264]	@ (8000700 <GPIO_PeriClkEnable+0x1b8>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d106      	bne.n	800060a <GPIO_PeriClkEnable+0xc2>
			GPIOH_CLK_ENABLE();
 80005fc:	4b39      	ldr	r3, [pc, #228]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000600:	4a38      	ldr	r2, [pc, #224]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 8000602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000606:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000608:	e065      	b.n	80006d6 <GPIO_PeriClkEnable+0x18e>
			printf("Invalid Port\n");
 800060a:	483e      	ldr	r0, [pc, #248]	@ (8000704 <GPIO_PeriClkEnable+0x1bc>)
 800060c:	f000 fb8e 	bl	8000d2c <puts>
}
 8000610:	e061      	b.n	80006d6 <GPIO_PeriClkEnable+0x18e>
	} else if (EnOrDi == DISABLE) {
 8000612:	78fb      	ldrb	r3, [r7, #3]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d15b      	bne.n	80006d0 <GPIO_PeriClkEnable+0x188>
		if (pGPIOx == GPIOA) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a31      	ldr	r2, [pc, #196]	@ (80006e0 <GPIO_PeriClkEnable+0x198>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <GPIO_PeriClkEnable+0xe6>
			GPIOA_CLK_DISABLE();
 8000620:	4b30      	ldr	r3, [pc, #192]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000624:	4a2f      	ldr	r2, [pc, #188]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 8000626:	f023 0301 	bic.w	r3, r3, #1
 800062a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800062c:	e053      	b.n	80006d6 <GPIO_PeriClkEnable+0x18e>
		} else if (pGPIOx == GPIOB) {
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a2d      	ldr	r2, [pc, #180]	@ (80006e8 <GPIO_PeriClkEnable+0x1a0>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d106      	bne.n	8000644 <GPIO_PeriClkEnable+0xfc>
			GPIOB_CLK_DISABLE();
 8000636:	4b2b      	ldr	r3, [pc, #172]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	4a2a      	ldr	r2, [pc, #168]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 800063c:	f023 0302 	bic.w	r3, r3, #2
 8000640:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000642:	e048      	b.n	80006d6 <GPIO_PeriClkEnable+0x18e>
		} else if (pGPIOx == GPIOC) {
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a29      	ldr	r2, [pc, #164]	@ (80006ec <GPIO_PeriClkEnable+0x1a4>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d106      	bne.n	800065a <GPIO_PeriClkEnable+0x112>
			GPIOC_CLK_DISABLE();
 800064c:	4b25      	ldr	r3, [pc, #148]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 800064e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000650:	4a24      	ldr	r2, [pc, #144]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 8000652:	f023 0304 	bic.w	r3, r3, #4
 8000656:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000658:	e03d      	b.n	80006d6 <GPIO_PeriClkEnable+0x18e>
		} else if (pGPIOx == GPIOD) {
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4a24      	ldr	r2, [pc, #144]	@ (80006f0 <GPIO_PeriClkEnable+0x1a8>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d106      	bne.n	8000670 <GPIO_PeriClkEnable+0x128>
			GPIOD_CLK_DISABLE();
 8000662:	4b20      	ldr	r3, [pc, #128]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	4a1f      	ldr	r2, [pc, #124]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 8000668:	f023 0308 	bic.w	r3, r3, #8
 800066c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800066e:	e032      	b.n	80006d6 <GPIO_PeriClkEnable+0x18e>
		} else if (pGPIOx == GPIOE) {
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a20      	ldr	r2, [pc, #128]	@ (80006f4 <GPIO_PeriClkEnable+0x1ac>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d106      	bne.n	8000686 <GPIO_PeriClkEnable+0x13e>
			GPIOE_CLK_DISABLE();
 8000678:	4b1a      	ldr	r3, [pc, #104]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067c:	4a19      	ldr	r2, [pc, #100]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 800067e:	f023 0310 	bic.w	r3, r3, #16
 8000682:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000684:	e027      	b.n	80006d6 <GPIO_PeriClkEnable+0x18e>
		} else if (pGPIOx == GPIOF) {
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a1b      	ldr	r2, [pc, #108]	@ (80006f8 <GPIO_PeriClkEnable+0x1b0>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d106      	bne.n	800069c <GPIO_PeriClkEnable+0x154>
			GPIOF_CLK_DISABLE();
 800068e:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	4a14      	ldr	r2, [pc, #80]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 8000694:	f023 0320 	bic.w	r3, r3, #32
 8000698:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800069a:	e01c      	b.n	80006d6 <GPIO_PeriClkEnable+0x18e>
		} else if (pGPIOx == GPIOG) {
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a17      	ldr	r2, [pc, #92]	@ (80006fc <GPIO_PeriClkEnable+0x1b4>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d106      	bne.n	80006b2 <GPIO_PeriClkEnable+0x16a>
			GPIOG_CLK_DISABLE();
 80006a4:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 80006a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a8:	4a0e      	ldr	r2, [pc, #56]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 80006aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80006ae:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006b0:	e011      	b.n	80006d6 <GPIO_PeriClkEnable+0x18e>
		} else if (pGPIOx == GPIOH) {
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4a12      	ldr	r2, [pc, #72]	@ (8000700 <GPIO_PeriClkEnable+0x1b8>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d106      	bne.n	80006c8 <GPIO_PeriClkEnable+0x180>
			GPIOH_CLK_DISABLE();
 80006ba:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a09      	ldr	r2, [pc, #36]	@ (80006e4 <GPIO_PeriClkEnable+0x19c>)
 80006c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006c6:	e006      	b.n	80006d6 <GPIO_PeriClkEnable+0x18e>
			printf("Invalid Port\n");
 80006c8:	480e      	ldr	r0, [pc, #56]	@ (8000704 <GPIO_PeriClkEnable+0x1bc>)
 80006ca:	f000 fb2f 	bl	8000d2c <puts>
}
 80006ce:	e002      	b.n	80006d6 <GPIO_PeriClkEnable+0x18e>
		printf("Invalid Input\n");
 80006d0:	480d      	ldr	r0, [pc, #52]	@ (8000708 <GPIO_PeriClkEnable+0x1c0>)
 80006d2:	f000 fb2b 	bl	8000d2c <puts>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40020000 	.word	0x40020000
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40020400 	.word	0x40020400
 80006ec:	40020800 	.word	0x40020800
 80006f0:	40020c00 	.word	0x40020c00
 80006f4:	40021000 	.word	0x40021000
 80006f8:	40021400 	.word	0x40021400
 80006fc:	40021800 	.word	0x40021800
 8000700:	40021c00 	.word	0x40021c00
 8000704:	08001464 	.word	0x08001464
 8000708:	08001474 	.word	0x08001474

0800070c <GPIO_TogglePin>:
void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t Value) {

		pGPIOx->GPIOx_ODR = Value;
}

void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	70fb      	strb	r3, [r7, #3]

	pGPIOx->GPIOx_ODR ^= (1<<PinNumber);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	695b      	ldr	r3, [r3, #20]
 800071c:	78fa      	ldrb	r2, [r7, #3]
 800071e:	2101      	movs	r1, #1
 8000720:	fa01 f202 	lsl.w	r2, r1, r2
 8000724:	405a      	eors	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	615a      	str	r2, [r3, #20]
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <GPIO_IRQConfig>:

void GPIO_IRQConfig(uint8_t IRQ_Number, uint8_t EnOrDi) {
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	460a      	mov	r2, r1
 800073e:	71fb      	strb	r3, [r7, #7]
 8000740:	4613      	mov	r3, r2
 8000742:	71bb      	strb	r3, [r7, #6]

	if(EnOrDi == ENABLE)
 8000744:	79bb      	ldrb	r3, [r7, #6]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d133      	bne.n	80007b2 <GPIO_IRQConfig+0x7e>
	{
		if(IRQ_Number <=31)
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	2b1f      	cmp	r3, #31
 800074e:	d80a      	bhi.n	8000766 <GPIO_IRQConfig+0x32>
		{
			//Configure ISER0
			*ISER0 |= (1<< IRQ_Number);
 8000750:	4b34      	ldr	r3, [pc, #208]	@ (8000824 <GPIO_IRQConfig+0xf0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	79fa      	ldrb	r2, [r7, #7]
 8000756:	2101      	movs	r1, #1
 8000758:	fa01 f202 	lsl.w	r2, r1, r2
 800075c:	4611      	mov	r1, r2
 800075e:	4a31      	ldr	r2, [pc, #196]	@ (8000824 <GPIO_IRQConfig+0xf0>)
 8000760:	430b      	orrs	r3, r1
 8000762:	6013      	str	r3, [r2, #0]
		{
			//Configure ICER2
			*ICER2 |= (1<<(IRQ_Number%64));
		}
	}
}
 8000764:	e059      	b.n	800081a <GPIO_IRQConfig+0xe6>
		else if(IRQ_Number >31 && IRQ_Number <64)
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b1f      	cmp	r3, #31
 800076a:	d90f      	bls.n	800078c <GPIO_IRQConfig+0x58>
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000770:	d80c      	bhi.n	800078c <GPIO_IRQConfig+0x58>
			*ISER1 |= (1 << (IRQ_Number%32));
 8000772:	4b2d      	ldr	r3, [pc, #180]	@ (8000828 <GPIO_IRQConfig+0xf4>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	79fa      	ldrb	r2, [r7, #7]
 8000778:	f002 021f 	and.w	r2, r2, #31
 800077c:	2101      	movs	r1, #1
 800077e:	fa01 f202 	lsl.w	r2, r1, r2
 8000782:	4611      	mov	r1, r2
 8000784:	4a28      	ldr	r2, [pc, #160]	@ (8000828 <GPIO_IRQConfig+0xf4>)
 8000786:	430b      	orrs	r3, r1
 8000788:	6013      	str	r3, [r2, #0]
 800078a:	e046      	b.n	800081a <GPIO_IRQConfig+0xe6>
		else if(IRQ_Number >= 64 && IRQ_Number < 96)
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000790:	d943      	bls.n	800081a <GPIO_IRQConfig+0xe6>
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b5f      	cmp	r3, #95	@ 0x5f
 8000796:	d840      	bhi.n	800081a <GPIO_IRQConfig+0xe6>
			*ISER2 |= (1 << (IRQ_Number%64));
 8000798:	4b24      	ldr	r3, [pc, #144]	@ (800082c <GPIO_IRQConfig+0xf8>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	79fa      	ldrb	r2, [r7, #7]
 800079e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80007a2:	2101      	movs	r1, #1
 80007a4:	fa01 f202 	lsl.w	r2, r1, r2
 80007a8:	4611      	mov	r1, r2
 80007aa:	4a20      	ldr	r2, [pc, #128]	@ (800082c <GPIO_IRQConfig+0xf8>)
 80007ac:	430b      	orrs	r3, r1
 80007ae:	6013      	str	r3, [r2, #0]
}
 80007b0:	e033      	b.n	800081a <GPIO_IRQConfig+0xe6>
		if(IRQ_Number <=31)
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2b1f      	cmp	r3, #31
 80007b6:	d80a      	bhi.n	80007ce <GPIO_IRQConfig+0x9a>
			*ICER0 |= (1<<IRQ_Number);
 80007b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000830 <GPIO_IRQConfig+0xfc>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	79fa      	ldrb	r2, [r7, #7]
 80007be:	2101      	movs	r1, #1
 80007c0:	fa01 f202 	lsl.w	r2, r1, r2
 80007c4:	4611      	mov	r1, r2
 80007c6:	4a1a      	ldr	r2, [pc, #104]	@ (8000830 <GPIO_IRQConfig+0xfc>)
 80007c8:	430b      	orrs	r3, r1
 80007ca:	6013      	str	r3, [r2, #0]
}
 80007cc:	e025      	b.n	800081a <GPIO_IRQConfig+0xe6>
		else if(IRQ_Number >31 && IRQ_Number <64)
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	2b1f      	cmp	r3, #31
 80007d2:	d90f      	bls.n	80007f4 <GPIO_IRQConfig+0xc0>
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80007d8:	d80c      	bhi.n	80007f4 <GPIO_IRQConfig+0xc0>
			*ICER1 |= (1 << (IRQ_Number%32));
 80007da:	4b16      	ldr	r3, [pc, #88]	@ (8000834 <GPIO_IRQConfig+0x100>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	79fa      	ldrb	r2, [r7, #7]
 80007e0:	f002 021f 	and.w	r2, r2, #31
 80007e4:	2101      	movs	r1, #1
 80007e6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ea:	4611      	mov	r1, r2
 80007ec:	4a11      	ldr	r2, [pc, #68]	@ (8000834 <GPIO_IRQConfig+0x100>)
 80007ee:	430b      	orrs	r3, r1
 80007f0:	6013      	str	r3, [r2, #0]
 80007f2:	e012      	b.n	800081a <GPIO_IRQConfig+0xe6>
		else if(IRQ_Number >= 64 && IRQ_Number < 96)
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80007f8:	d90f      	bls.n	800081a <GPIO_IRQConfig+0xe6>
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b5f      	cmp	r3, #95	@ 0x5f
 80007fe:	d80c      	bhi.n	800081a <GPIO_IRQConfig+0xe6>
			*ICER2 |= (1<<(IRQ_Number%64));
 8000800:	4b0d      	ldr	r3, [pc, #52]	@ (8000838 <GPIO_IRQConfig+0x104>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	79fa      	ldrb	r2, [r7, #7]
 8000806:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800080a:	2101      	movs	r1, #1
 800080c:	fa01 f202 	lsl.w	r2, r1, r2
 8000810:	4611      	mov	r1, r2
 8000812:	4a09      	ldr	r2, [pc, #36]	@ (8000838 <GPIO_IRQConfig+0x104>)
 8000814:	430b      	orrs	r3, r1
 8000816:	6013      	str	r3, [r2, #0]
}
 8000818:	e7ff      	b.n	800081a <GPIO_IRQConfig+0xe6>
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	e000e100 	.word	0xe000e100
 8000828:	e000e104 	.word	0xe000e104
 800082c:	e000e108 	.word	0xe000e108
 8000830:	e000e180 	.word	0xe000e180
 8000834:	e000e184 	.word	0xe000e184
 8000838:	e000e188 	.word	0xe000e188

0800083c <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber) {
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]

	if(EXTI->EXTI_PR & (1<< PinNumber))
 8000846:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <GPIO_IRQHandling+0x3c>)
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	79fa      	ldrb	r2, [r7, #7]
 800084c:	2101      	movs	r1, #1
 800084e:	fa01 f202 	lsl.w	r2, r1, r2
 8000852:	4013      	ands	r3, r2
 8000854:	2b00      	cmp	r3, #0
 8000856:	d009      	beq.n	800086c <GPIO_IRQHandling+0x30>
	{
		//Clear the bit
		EXTI->EXTI_PR |= (1<<PinNumber);
 8000858:	4b07      	ldr	r3, [pc, #28]	@ (8000878 <GPIO_IRQHandling+0x3c>)
 800085a:	695b      	ldr	r3, [r3, #20]
 800085c:	79fa      	ldrb	r2, [r7, #7]
 800085e:	2101      	movs	r1, #1
 8000860:	fa01 f202 	lsl.w	r2, r1, r2
 8000864:	4611      	mov	r1, r2
 8000866:	4a04      	ldr	r2, [pc, #16]	@ (8000878 <GPIO_IRQHandling+0x3c>)
 8000868:	430b      	orrs	r3, r1
 800086a:	6153      	str	r3, [r2, #20]
	}
}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40013c00 	.word	0x40013c00

0800087c <GPIO_IRQPriority_Config>:


void GPIO_IRQPriority_Config(uint8_t IRQ_Number,uint32_t Priority)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	6039      	str	r1, [r7, #0]
 8000886:	71fb      	strb	r3, [r7, #7]
	//First the IPR register
	uint8_t iprx = IRQ_Number/4;
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	089b      	lsrs	r3, r3, #2
 800088c:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQ_Number%4;
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	f003 0303 	and.w	r3, r3, #3
 8000894:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amt = (8*iprx_section) + (8 - NO_OF_PR_BITS_IMPLEMENTED);
 8000896:	7bbb      	ldrb	r3, [r7, #14]
 8000898:	00db      	lsls	r3, r3, #3
 800089a:	b2db      	uxtb	r3, r3
 800089c:	3304      	adds	r3, #4
 800089e:	737b      	strb	r3, [r7, #13]
	*(NVIC_IPR_BASE_ADDR + (iprx*4)) |= (Priority << shift_amt);
 80008a0:	7bfb      	ldrb	r3, [r7, #15]
 80008a2:	011b      	lsls	r3, r3, #4
 80008a4:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80008a8:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80008ac:	6819      	ldr	r1, [r3, #0]
 80008ae:	7b7b      	ldrb	r3, [r7, #13]
 80008b0:	683a      	ldr	r2, [r7, #0]
 80008b2:	409a      	lsls	r2, r3
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	011b      	lsls	r3, r3, #4
 80008b8:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80008bc:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80008c0:	430a      	orrs	r2, r1
 80008c2:	601a      	str	r2, [r3, #0]
}
 80008c4:	bf00      	nop
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr
	...

080008d0 <ButtonInterrupt_5ms>:

#include "button_press.h"
#include "interrupt_conf.h"

void ButtonInterrupt_5ms()
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOALed, GPIOCBtn;

	/*Pin Configuration for LED configuration*/
	GPIOALed.pGPIOx = GPIOA;
 80008d6:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <ButtonInterrupt_5ms+0x68>)
 80008d8:	60fb      	str	r3, [r7, #12]
	GPIOALed.GPIOPinConfig.PinNumber = GPIO_PINNUMBER_5;
 80008da:	2305      	movs	r3, #5
 80008dc:	743b      	strb	r3, [r7, #16]
	GPIOALed.GPIOPinConfig.PinMode = GPIO_MODE_OUTPUT;
 80008de:	2301      	movs	r3, #1
 80008e0:	747b      	strb	r3, [r7, #17]
	GPIOALed.GPIOPinConfig.PinOPType = GPIO_OTYPE_PUPL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	753b      	strb	r3, [r7, #20]
	GPIOALed.GPIOPinConfig.PinSpeed = GPIO_OSPEED_MEDIUM;
 80008e6:	2301      	movs	r3, #1
 80008e8:	74bb      	strb	r3, [r7, #18]
	GPIOALed.GPIOPinConfig.PinPuPdControl = GPIO_PUPD_NONE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	74fb      	strb	r3, [r7, #19]

	GPIO_PeriClkEnable(GPIOA, ENABLE);
 80008ee:	2101      	movs	r1, #1
 80008f0:	4811      	ldr	r0, [pc, #68]	@ (8000938 <ButtonInterrupt_5ms+0x68>)
 80008f2:	f7ff fe29 	bl	8000548 <GPIO_PeriClkEnable>

	GPIO_Init(&GPIOALed);
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fc82 	bl	8000204 <GPIO_Init>

	/* Pin configuration for button configuration*/
	GPIOCBtn.pGPIOx = GPIOC;
 8000900:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <ButtonInterrupt_5ms+0x6c>)
 8000902:	603b      	str	r3, [r7, #0]
	GPIOCBtn.GPIOPinConfig.PinNumber = GPIO_PINNUMBER_13;
 8000904:	230d      	movs	r3, #13
 8000906:	713b      	strb	r3, [r7, #4]
	GPIOCBtn.GPIOPinConfig.PinMode = GPIO_MODE_IT_RE;
 8000908:	2305      	movs	r3, #5
 800090a:	717b      	strb	r3, [r7, #5]
	GPIOCBtn.GPIOPinConfig.PinSpeed = GPIO_OSPEED_MEDIUM;
 800090c:	2301      	movs	r3, #1
 800090e:	71bb      	strb	r3, [r7, #6]
	GPIOCBtn.GPIOPinConfig.PinPuPdControl = GPIO_PUPD_NONE;
 8000910:	2300      	movs	r3, #0
 8000912:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClkEnable(GPIOC, ENABLE);
 8000914:	2101      	movs	r1, #1
 8000916:	4809      	ldr	r0, [pc, #36]	@ (800093c <ButtonInterrupt_5ms+0x6c>)
 8000918:	f7ff fe16 	bl	8000548 <GPIO_PeriClkEnable>

	GPIO_Init(&GPIOCBtn);
 800091c:	463b      	mov	r3, r7
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fc70 	bl	8000204 <GPIO_Init>

	GPIO_IRQPriority_Config(IRQ_PRIO_EXTI110_15, 15);
 8000924:	210f      	movs	r1, #15
 8000926:	2028      	movs	r0, #40	@ 0x28
 8000928:	f7ff ffa8 	bl	800087c <GPIO_IRQPriority_Config>
	GPIO_IRQConfig(IRQ_PRIO_EXTI110_15, ENABLE);
 800092c:	2101      	movs	r1, #1
 800092e:	2028      	movs	r0, #40	@ 0x28
 8000930:	f7ff ff00 	bl	8000734 <GPIO_IRQConfig>

	while(1);
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <ButtonInterrupt_5ms+0x64>
 8000938:	40020000 	.word	0x40020000
 800093c:	40020800 	.word	0x40020800

08000940 <EXTI15_10_IRQHandler>:

}


void EXTI15_10_IRQHandler()
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PINNUMBER_13);
 8000944:	200d      	movs	r0, #13
 8000946:	f7ff ff79 	bl	800083c <GPIO_IRQHandling>
	GPIO_TogglePin(GPIOC, GPIO_PINNUMBER_13);
 800094a:	210d      	movs	r1, #13
 800094c:	4802      	ldr	r0, [pc, #8]	@ (8000958 <EXTI15_10_IRQHandler+0x18>)
 800094e:	f7ff fedd 	bl	800070c <GPIO_TogglePin>
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40020800 	.word	0x40020800

0800095c <main>:
#include "stm32f446re_gpio.h"
#include "led_toggle.h"
#include "button_press.h"

int main(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
#if(PROJECT_LED ==1)
	LED_Blinky_5ms();
#endif

#if(PROJECT_BUTTON == 1)
	ButtonInterrupt_5ms();
 8000960:	f7ff ffb6 	bl	80008d0 <ButtonInterrupt_5ms>
	//Button_Press_5ms();
#endif
    /* Loop forever */
	for(;;);
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <main+0x8>

08000968 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	e00a      	b.n	8000990 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800097a:	f3af 8000 	nop.w
 800097e:	4601      	mov	r1, r0
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	1c5a      	adds	r2, r3, #1
 8000984:	60ba      	str	r2, [r7, #8]
 8000986:	b2ca      	uxtb	r2, r1
 8000988:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	3301      	adds	r3, #1
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	429a      	cmp	r2, r3
 8000996:	dbf0      	blt.n	800097a <_read+0x12>
  }

  return len;
 8000998:	687b      	ldr	r3, [r7, #4]
}
 800099a:	4618      	mov	r0, r3
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b086      	sub	sp, #24
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	60f8      	str	r0, [r7, #12]
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	e009      	b.n	80009c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	1c5a      	adds	r2, r3, #1
 80009b8:	60ba      	str	r2, [r7, #8]
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	4618      	mov	r0, r3
 80009be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	3301      	adds	r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	697a      	ldr	r2, [r7, #20]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	dbf1      	blt.n	80009b4 <_write+0x12>
  }
  return len;
 80009d0:	687b      	ldr	r3, [r7, #4]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <_close>:

int _close(int file)
{
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr

080009f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a00:	605a      	str	r2, [r3, #4]
  return 0;
 8000a02:	2300      	movs	r3, #0
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr

08000a0e <_isatty>:

int _isatty(int file)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	b083      	sub	sp, #12
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a16:	2301      	movs	r3, #1
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr

08000a22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a22:	b480      	push	{r7}
 8000a24:	b085      	sub	sp, #20
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	60f8      	str	r0, [r7, #12]
 8000a2a:	60b9      	str	r1, [r7, #8]
 8000a2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a2e:	2300      	movs	r3, #0
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
	...

08000a3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a44:	4a14      	ldr	r2, [pc, #80]	@ (8000a98 <_sbrk+0x5c>)
 8000a46:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <_sbrk+0x60>)
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a50:	4b13      	ldr	r3, [pc, #76]	@ (8000aa0 <_sbrk+0x64>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d102      	bne.n	8000a5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a58:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <_sbrk+0x64>)
 8000a5a:	4a12      	ldr	r2, [pc, #72]	@ (8000aa4 <_sbrk+0x68>)
 8000a5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a5e:	4b10      	ldr	r3, [pc, #64]	@ (8000aa0 <_sbrk+0x64>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4413      	add	r3, r2
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d207      	bcs.n	8000a7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a6c:	f000 fa8c 	bl	8000f88 <__errno>
 8000a70:	4603      	mov	r3, r0
 8000a72:	220c      	movs	r2, #12
 8000a74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7a:	e009      	b.n	8000a90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a7c:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <_sbrk+0x64>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a82:	4b07      	ldr	r3, [pc, #28]	@ (8000aa0 <_sbrk+0x64>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	4a05      	ldr	r2, [pc, #20]	@ (8000aa0 <_sbrk+0x64>)
 8000a8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3718      	adds	r7, #24
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20020000 	.word	0x20020000
 8000a9c:	00000400 	.word	0x00000400
 8000aa0:	20000078 	.word	0x20000078
 8000aa4:	200001c8 	.word	0x200001c8

08000aa8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aa8:	480d      	ldr	r0, [pc, #52]	@ (8000ae0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aaa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000aac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab0:	480c      	ldr	r0, [pc, #48]	@ (8000ae4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ab2:	490d      	ldr	r1, [pc, #52]	@ (8000ae8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8000aec <LoopForever+0xe>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8000af0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac8:	4c0a      	ldr	r4, [pc, #40]	@ (8000af4 <LoopForever+0x16>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ad6:	f000 fa5d 	bl	8000f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ada:	f7ff ff3f 	bl	800095c <main>

08000ade <LoopForever>:

LoopForever:
  b LoopForever
 8000ade:	e7fe      	b.n	8000ade <LoopForever>
  ldr   r0, =_estack
 8000ae0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000aec:	0800148c 	.word	0x0800148c
  ldr r2, =_sbss
 8000af0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000af4:	200001c8 	.word	0x200001c8

08000af8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC_IRQHandler>
	...

08000afc <std>:
 8000afc:	2300      	movs	r3, #0
 8000afe:	b510      	push	{r4, lr}
 8000b00:	4604      	mov	r4, r0
 8000b02:	e9c0 3300 	strd	r3, r3, [r0]
 8000b06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b0a:	6083      	str	r3, [r0, #8]
 8000b0c:	8181      	strh	r1, [r0, #12]
 8000b0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000b10:	81c2      	strh	r2, [r0, #14]
 8000b12:	6183      	str	r3, [r0, #24]
 8000b14:	4619      	mov	r1, r3
 8000b16:	2208      	movs	r2, #8
 8000b18:	305c      	adds	r0, #92	@ 0x5c
 8000b1a:	f000 f9e7 	bl	8000eec <memset>
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b54 <std+0x58>)
 8000b20:	6263      	str	r3, [r4, #36]	@ 0x24
 8000b22:	4b0d      	ldr	r3, [pc, #52]	@ (8000b58 <std+0x5c>)
 8000b24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000b26:	4b0d      	ldr	r3, [pc, #52]	@ (8000b5c <std+0x60>)
 8000b28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b60 <std+0x64>)
 8000b2c:	6323      	str	r3, [r4, #48]	@ 0x30
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b64 <std+0x68>)
 8000b30:	6224      	str	r4, [r4, #32]
 8000b32:	429c      	cmp	r4, r3
 8000b34:	d006      	beq.n	8000b44 <std+0x48>
 8000b36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000b3a:	4294      	cmp	r4, r2
 8000b3c:	d002      	beq.n	8000b44 <std+0x48>
 8000b3e:	33d0      	adds	r3, #208	@ 0xd0
 8000b40:	429c      	cmp	r4, r3
 8000b42:	d105      	bne.n	8000b50 <std+0x54>
 8000b44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b4c:	f000 ba46 	b.w	8000fdc <__retarget_lock_init_recursive>
 8000b50:	bd10      	pop	{r4, pc}
 8000b52:	bf00      	nop
 8000b54:	08000d3d 	.word	0x08000d3d
 8000b58:	08000d5f 	.word	0x08000d5f
 8000b5c:	08000d97 	.word	0x08000d97
 8000b60:	08000dbb 	.word	0x08000dbb
 8000b64:	2000007c 	.word	0x2000007c

08000b68 <stdio_exit_handler>:
 8000b68:	4a02      	ldr	r2, [pc, #8]	@ (8000b74 <stdio_exit_handler+0xc>)
 8000b6a:	4903      	ldr	r1, [pc, #12]	@ (8000b78 <stdio_exit_handler+0x10>)
 8000b6c:	4803      	ldr	r0, [pc, #12]	@ (8000b7c <stdio_exit_handler+0x14>)
 8000b6e:	f000 b869 	b.w	8000c44 <_fwalk_sglue>
 8000b72:	bf00      	nop
 8000b74:	20000000 	.word	0x20000000
 8000b78:	080012d5 	.word	0x080012d5
 8000b7c:	20000010 	.word	0x20000010

08000b80 <cleanup_stdio>:
 8000b80:	6841      	ldr	r1, [r0, #4]
 8000b82:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <cleanup_stdio+0x34>)
 8000b84:	4299      	cmp	r1, r3
 8000b86:	b510      	push	{r4, lr}
 8000b88:	4604      	mov	r4, r0
 8000b8a:	d001      	beq.n	8000b90 <cleanup_stdio+0x10>
 8000b8c:	f000 fba2 	bl	80012d4 <_fflush_r>
 8000b90:	68a1      	ldr	r1, [r4, #8]
 8000b92:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <cleanup_stdio+0x38>)
 8000b94:	4299      	cmp	r1, r3
 8000b96:	d002      	beq.n	8000b9e <cleanup_stdio+0x1e>
 8000b98:	4620      	mov	r0, r4
 8000b9a:	f000 fb9b 	bl	80012d4 <_fflush_r>
 8000b9e:	68e1      	ldr	r1, [r4, #12]
 8000ba0:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <cleanup_stdio+0x3c>)
 8000ba2:	4299      	cmp	r1, r3
 8000ba4:	d004      	beq.n	8000bb0 <cleanup_stdio+0x30>
 8000ba6:	4620      	mov	r0, r4
 8000ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bac:	f000 bb92 	b.w	80012d4 <_fflush_r>
 8000bb0:	bd10      	pop	{r4, pc}
 8000bb2:	bf00      	nop
 8000bb4:	2000007c 	.word	0x2000007c
 8000bb8:	200000e4 	.word	0x200000e4
 8000bbc:	2000014c 	.word	0x2000014c

08000bc0 <global_stdio_init.part.0>:
 8000bc0:	b510      	push	{r4, lr}
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf0 <global_stdio_init.part.0+0x30>)
 8000bc4:	4c0b      	ldr	r4, [pc, #44]	@ (8000bf4 <global_stdio_init.part.0+0x34>)
 8000bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf8 <global_stdio_init.part.0+0x38>)
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	4620      	mov	r0, r4
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2104      	movs	r1, #4
 8000bd0:	f7ff ff94 	bl	8000afc <std>
 8000bd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2109      	movs	r1, #9
 8000bdc:	f7ff ff8e 	bl	8000afc <std>
 8000be0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000be4:	2202      	movs	r2, #2
 8000be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bea:	2112      	movs	r1, #18
 8000bec:	f7ff bf86 	b.w	8000afc <std>
 8000bf0:	200001b4 	.word	0x200001b4
 8000bf4:	2000007c 	.word	0x2000007c
 8000bf8:	08000b69 	.word	0x08000b69

08000bfc <__sfp_lock_acquire>:
 8000bfc:	4801      	ldr	r0, [pc, #4]	@ (8000c04 <__sfp_lock_acquire+0x8>)
 8000bfe:	f000 b9ee 	b.w	8000fde <__retarget_lock_acquire_recursive>
 8000c02:	bf00      	nop
 8000c04:	200001bd 	.word	0x200001bd

08000c08 <__sfp_lock_release>:
 8000c08:	4801      	ldr	r0, [pc, #4]	@ (8000c10 <__sfp_lock_release+0x8>)
 8000c0a:	f000 b9e9 	b.w	8000fe0 <__retarget_lock_release_recursive>
 8000c0e:	bf00      	nop
 8000c10:	200001bd 	.word	0x200001bd

08000c14 <__sinit>:
 8000c14:	b510      	push	{r4, lr}
 8000c16:	4604      	mov	r4, r0
 8000c18:	f7ff fff0 	bl	8000bfc <__sfp_lock_acquire>
 8000c1c:	6a23      	ldr	r3, [r4, #32]
 8000c1e:	b11b      	cbz	r3, 8000c28 <__sinit+0x14>
 8000c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c24:	f7ff bff0 	b.w	8000c08 <__sfp_lock_release>
 8000c28:	4b04      	ldr	r3, [pc, #16]	@ (8000c3c <__sinit+0x28>)
 8000c2a:	6223      	str	r3, [r4, #32]
 8000c2c:	4b04      	ldr	r3, [pc, #16]	@ (8000c40 <__sinit+0x2c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d1f5      	bne.n	8000c20 <__sinit+0xc>
 8000c34:	f7ff ffc4 	bl	8000bc0 <global_stdio_init.part.0>
 8000c38:	e7f2      	b.n	8000c20 <__sinit+0xc>
 8000c3a:	bf00      	nop
 8000c3c:	08000b81 	.word	0x08000b81
 8000c40:	200001b4 	.word	0x200001b4

08000c44 <_fwalk_sglue>:
 8000c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c48:	4607      	mov	r7, r0
 8000c4a:	4688      	mov	r8, r1
 8000c4c:	4614      	mov	r4, r2
 8000c4e:	2600      	movs	r6, #0
 8000c50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c54:	f1b9 0901 	subs.w	r9, r9, #1
 8000c58:	d505      	bpl.n	8000c66 <_fwalk_sglue+0x22>
 8000c5a:	6824      	ldr	r4, [r4, #0]
 8000c5c:	2c00      	cmp	r4, #0
 8000c5e:	d1f7      	bne.n	8000c50 <_fwalk_sglue+0xc>
 8000c60:	4630      	mov	r0, r6
 8000c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c66:	89ab      	ldrh	r3, [r5, #12]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d907      	bls.n	8000c7c <_fwalk_sglue+0x38>
 8000c6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c70:	3301      	adds	r3, #1
 8000c72:	d003      	beq.n	8000c7c <_fwalk_sglue+0x38>
 8000c74:	4629      	mov	r1, r5
 8000c76:	4638      	mov	r0, r7
 8000c78:	47c0      	blx	r8
 8000c7a:	4306      	orrs	r6, r0
 8000c7c:	3568      	adds	r5, #104	@ 0x68
 8000c7e:	e7e9      	b.n	8000c54 <_fwalk_sglue+0x10>

08000c80 <_puts_r>:
 8000c80:	6a03      	ldr	r3, [r0, #32]
 8000c82:	b570      	push	{r4, r5, r6, lr}
 8000c84:	6884      	ldr	r4, [r0, #8]
 8000c86:	4605      	mov	r5, r0
 8000c88:	460e      	mov	r6, r1
 8000c8a:	b90b      	cbnz	r3, 8000c90 <_puts_r+0x10>
 8000c8c:	f7ff ffc2 	bl	8000c14 <__sinit>
 8000c90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000c92:	07db      	lsls	r3, r3, #31
 8000c94:	d405      	bmi.n	8000ca2 <_puts_r+0x22>
 8000c96:	89a3      	ldrh	r3, [r4, #12]
 8000c98:	0598      	lsls	r0, r3, #22
 8000c9a:	d402      	bmi.n	8000ca2 <_puts_r+0x22>
 8000c9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000c9e:	f000 f99e 	bl	8000fde <__retarget_lock_acquire_recursive>
 8000ca2:	89a3      	ldrh	r3, [r4, #12]
 8000ca4:	0719      	lsls	r1, r3, #28
 8000ca6:	d502      	bpl.n	8000cae <_puts_r+0x2e>
 8000ca8:	6923      	ldr	r3, [r4, #16]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d135      	bne.n	8000d1a <_puts_r+0x9a>
 8000cae:	4621      	mov	r1, r4
 8000cb0:	4628      	mov	r0, r5
 8000cb2:	f000 f8c5 	bl	8000e40 <__swsetup_r>
 8000cb6:	b380      	cbz	r0, 8000d1a <_puts_r+0x9a>
 8000cb8:	f04f 35ff 	mov.w	r5, #4294967295
 8000cbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000cbe:	07da      	lsls	r2, r3, #31
 8000cc0:	d405      	bmi.n	8000cce <_puts_r+0x4e>
 8000cc2:	89a3      	ldrh	r3, [r4, #12]
 8000cc4:	059b      	lsls	r3, r3, #22
 8000cc6:	d402      	bmi.n	8000cce <_puts_r+0x4e>
 8000cc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000cca:	f000 f989 	bl	8000fe0 <__retarget_lock_release_recursive>
 8000cce:	4628      	mov	r0, r5
 8000cd0:	bd70      	pop	{r4, r5, r6, pc}
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	da04      	bge.n	8000ce0 <_puts_r+0x60>
 8000cd6:	69a2      	ldr	r2, [r4, #24]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	dc17      	bgt.n	8000d0c <_puts_r+0x8c>
 8000cdc:	290a      	cmp	r1, #10
 8000cde:	d015      	beq.n	8000d0c <_puts_r+0x8c>
 8000ce0:	6823      	ldr	r3, [r4, #0]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	6022      	str	r2, [r4, #0]
 8000ce6:	7019      	strb	r1, [r3, #0]
 8000ce8:	68a3      	ldr	r3, [r4, #8]
 8000cea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	60a3      	str	r3, [r4, #8]
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	d1ed      	bne.n	8000cd2 <_puts_r+0x52>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	da11      	bge.n	8000d1e <_puts_r+0x9e>
 8000cfa:	4622      	mov	r2, r4
 8000cfc:	210a      	movs	r1, #10
 8000cfe:	4628      	mov	r0, r5
 8000d00:	f000 f85f 	bl	8000dc2 <__swbuf_r>
 8000d04:	3001      	adds	r0, #1
 8000d06:	d0d7      	beq.n	8000cb8 <_puts_r+0x38>
 8000d08:	250a      	movs	r5, #10
 8000d0a:	e7d7      	b.n	8000cbc <_puts_r+0x3c>
 8000d0c:	4622      	mov	r2, r4
 8000d0e:	4628      	mov	r0, r5
 8000d10:	f000 f857 	bl	8000dc2 <__swbuf_r>
 8000d14:	3001      	adds	r0, #1
 8000d16:	d1e7      	bne.n	8000ce8 <_puts_r+0x68>
 8000d18:	e7ce      	b.n	8000cb8 <_puts_r+0x38>
 8000d1a:	3e01      	subs	r6, #1
 8000d1c:	e7e4      	b.n	8000ce8 <_puts_r+0x68>
 8000d1e:	6823      	ldr	r3, [r4, #0]
 8000d20:	1c5a      	adds	r2, r3, #1
 8000d22:	6022      	str	r2, [r4, #0]
 8000d24:	220a      	movs	r2, #10
 8000d26:	701a      	strb	r2, [r3, #0]
 8000d28:	e7ee      	b.n	8000d08 <_puts_r+0x88>
	...

08000d2c <puts>:
 8000d2c:	4b02      	ldr	r3, [pc, #8]	@ (8000d38 <puts+0xc>)
 8000d2e:	4601      	mov	r1, r0
 8000d30:	6818      	ldr	r0, [r3, #0]
 8000d32:	f7ff bfa5 	b.w	8000c80 <_puts_r>
 8000d36:	bf00      	nop
 8000d38:	2000000c 	.word	0x2000000c

08000d3c <__sread>:
 8000d3c:	b510      	push	{r4, lr}
 8000d3e:	460c      	mov	r4, r1
 8000d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d44:	f000 f8fc 	bl	8000f40 <_read_r>
 8000d48:	2800      	cmp	r0, #0
 8000d4a:	bfab      	itete	ge
 8000d4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000d4e:	89a3      	ldrhlt	r3, [r4, #12]
 8000d50:	181b      	addge	r3, r3, r0
 8000d52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000d56:	bfac      	ite	ge
 8000d58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000d5a:	81a3      	strhlt	r3, [r4, #12]
 8000d5c:	bd10      	pop	{r4, pc}

08000d5e <__swrite>:
 8000d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d62:	461f      	mov	r7, r3
 8000d64:	898b      	ldrh	r3, [r1, #12]
 8000d66:	05db      	lsls	r3, r3, #23
 8000d68:	4605      	mov	r5, r0
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	4616      	mov	r6, r2
 8000d6e:	d505      	bpl.n	8000d7c <__swrite+0x1e>
 8000d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d74:	2302      	movs	r3, #2
 8000d76:	2200      	movs	r2, #0
 8000d78:	f000 f8d0 	bl	8000f1c <_lseek_r>
 8000d7c:	89a3      	ldrh	r3, [r4, #12]
 8000d7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d86:	81a3      	strh	r3, [r4, #12]
 8000d88:	4632      	mov	r2, r6
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	4628      	mov	r0, r5
 8000d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d92:	f000 b8e7 	b.w	8000f64 <_write_r>

08000d96 <__sseek>:
 8000d96:	b510      	push	{r4, lr}
 8000d98:	460c      	mov	r4, r1
 8000d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d9e:	f000 f8bd 	bl	8000f1c <_lseek_r>
 8000da2:	1c43      	adds	r3, r0, #1
 8000da4:	89a3      	ldrh	r3, [r4, #12]
 8000da6:	bf15      	itete	ne
 8000da8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000daa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000dae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000db2:	81a3      	strheq	r3, [r4, #12]
 8000db4:	bf18      	it	ne
 8000db6:	81a3      	strhne	r3, [r4, #12]
 8000db8:	bd10      	pop	{r4, pc}

08000dba <__sclose>:
 8000dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dbe:	f000 b89d 	b.w	8000efc <_close_r>

08000dc2 <__swbuf_r>:
 8000dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc4:	460e      	mov	r6, r1
 8000dc6:	4614      	mov	r4, r2
 8000dc8:	4605      	mov	r5, r0
 8000dca:	b118      	cbz	r0, 8000dd4 <__swbuf_r+0x12>
 8000dcc:	6a03      	ldr	r3, [r0, #32]
 8000dce:	b90b      	cbnz	r3, 8000dd4 <__swbuf_r+0x12>
 8000dd0:	f7ff ff20 	bl	8000c14 <__sinit>
 8000dd4:	69a3      	ldr	r3, [r4, #24]
 8000dd6:	60a3      	str	r3, [r4, #8]
 8000dd8:	89a3      	ldrh	r3, [r4, #12]
 8000dda:	071a      	lsls	r2, r3, #28
 8000ddc:	d501      	bpl.n	8000de2 <__swbuf_r+0x20>
 8000dde:	6923      	ldr	r3, [r4, #16]
 8000de0:	b943      	cbnz	r3, 8000df4 <__swbuf_r+0x32>
 8000de2:	4621      	mov	r1, r4
 8000de4:	4628      	mov	r0, r5
 8000de6:	f000 f82b 	bl	8000e40 <__swsetup_r>
 8000dea:	b118      	cbz	r0, 8000df4 <__swbuf_r+0x32>
 8000dec:	f04f 37ff 	mov.w	r7, #4294967295
 8000df0:	4638      	mov	r0, r7
 8000df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000df4:	6823      	ldr	r3, [r4, #0]
 8000df6:	6922      	ldr	r2, [r4, #16]
 8000df8:	1a98      	subs	r0, r3, r2
 8000dfa:	6963      	ldr	r3, [r4, #20]
 8000dfc:	b2f6      	uxtb	r6, r6
 8000dfe:	4283      	cmp	r3, r0
 8000e00:	4637      	mov	r7, r6
 8000e02:	dc05      	bgt.n	8000e10 <__swbuf_r+0x4e>
 8000e04:	4621      	mov	r1, r4
 8000e06:	4628      	mov	r0, r5
 8000e08:	f000 fa64 	bl	80012d4 <_fflush_r>
 8000e0c:	2800      	cmp	r0, #0
 8000e0e:	d1ed      	bne.n	8000dec <__swbuf_r+0x2a>
 8000e10:	68a3      	ldr	r3, [r4, #8]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	60a3      	str	r3, [r4, #8]
 8000e16:	6823      	ldr	r3, [r4, #0]
 8000e18:	1c5a      	adds	r2, r3, #1
 8000e1a:	6022      	str	r2, [r4, #0]
 8000e1c:	701e      	strb	r6, [r3, #0]
 8000e1e:	6962      	ldr	r2, [r4, #20]
 8000e20:	1c43      	adds	r3, r0, #1
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d004      	beq.n	8000e30 <__swbuf_r+0x6e>
 8000e26:	89a3      	ldrh	r3, [r4, #12]
 8000e28:	07db      	lsls	r3, r3, #31
 8000e2a:	d5e1      	bpl.n	8000df0 <__swbuf_r+0x2e>
 8000e2c:	2e0a      	cmp	r6, #10
 8000e2e:	d1df      	bne.n	8000df0 <__swbuf_r+0x2e>
 8000e30:	4621      	mov	r1, r4
 8000e32:	4628      	mov	r0, r5
 8000e34:	f000 fa4e 	bl	80012d4 <_fflush_r>
 8000e38:	2800      	cmp	r0, #0
 8000e3a:	d0d9      	beq.n	8000df0 <__swbuf_r+0x2e>
 8000e3c:	e7d6      	b.n	8000dec <__swbuf_r+0x2a>
	...

08000e40 <__swsetup_r>:
 8000e40:	b538      	push	{r3, r4, r5, lr}
 8000e42:	4b29      	ldr	r3, [pc, #164]	@ (8000ee8 <__swsetup_r+0xa8>)
 8000e44:	4605      	mov	r5, r0
 8000e46:	6818      	ldr	r0, [r3, #0]
 8000e48:	460c      	mov	r4, r1
 8000e4a:	b118      	cbz	r0, 8000e54 <__swsetup_r+0x14>
 8000e4c:	6a03      	ldr	r3, [r0, #32]
 8000e4e:	b90b      	cbnz	r3, 8000e54 <__swsetup_r+0x14>
 8000e50:	f7ff fee0 	bl	8000c14 <__sinit>
 8000e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e58:	0719      	lsls	r1, r3, #28
 8000e5a:	d422      	bmi.n	8000ea2 <__swsetup_r+0x62>
 8000e5c:	06da      	lsls	r2, r3, #27
 8000e5e:	d407      	bmi.n	8000e70 <__swsetup_r+0x30>
 8000e60:	2209      	movs	r2, #9
 8000e62:	602a      	str	r2, [r5, #0]
 8000e64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e68:	81a3      	strh	r3, [r4, #12]
 8000e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6e:	e033      	b.n	8000ed8 <__swsetup_r+0x98>
 8000e70:	0758      	lsls	r0, r3, #29
 8000e72:	d512      	bpl.n	8000e9a <__swsetup_r+0x5a>
 8000e74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000e76:	b141      	cbz	r1, 8000e8a <__swsetup_r+0x4a>
 8000e78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000e7c:	4299      	cmp	r1, r3
 8000e7e:	d002      	beq.n	8000e86 <__swsetup_r+0x46>
 8000e80:	4628      	mov	r0, r5
 8000e82:	f000 f8af 	bl	8000fe4 <_free_r>
 8000e86:	2300      	movs	r3, #0
 8000e88:	6363      	str	r3, [r4, #52]	@ 0x34
 8000e8a:	89a3      	ldrh	r3, [r4, #12]
 8000e8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000e90:	81a3      	strh	r3, [r4, #12]
 8000e92:	2300      	movs	r3, #0
 8000e94:	6063      	str	r3, [r4, #4]
 8000e96:	6923      	ldr	r3, [r4, #16]
 8000e98:	6023      	str	r3, [r4, #0]
 8000e9a:	89a3      	ldrh	r3, [r4, #12]
 8000e9c:	f043 0308 	orr.w	r3, r3, #8
 8000ea0:	81a3      	strh	r3, [r4, #12]
 8000ea2:	6923      	ldr	r3, [r4, #16]
 8000ea4:	b94b      	cbnz	r3, 8000eba <__swsetup_r+0x7a>
 8000ea6:	89a3      	ldrh	r3, [r4, #12]
 8000ea8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000eac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000eb0:	d003      	beq.n	8000eba <__swsetup_r+0x7a>
 8000eb2:	4621      	mov	r1, r4
 8000eb4:	4628      	mov	r0, r5
 8000eb6:	f000 fa5b 	bl	8001370 <__smakebuf_r>
 8000eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ebe:	f013 0201 	ands.w	r2, r3, #1
 8000ec2:	d00a      	beq.n	8000eda <__swsetup_r+0x9a>
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60a2      	str	r2, [r4, #8]
 8000ec8:	6962      	ldr	r2, [r4, #20]
 8000eca:	4252      	negs	r2, r2
 8000ecc:	61a2      	str	r2, [r4, #24]
 8000ece:	6922      	ldr	r2, [r4, #16]
 8000ed0:	b942      	cbnz	r2, 8000ee4 <__swsetup_r+0xa4>
 8000ed2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000ed6:	d1c5      	bne.n	8000e64 <__swsetup_r+0x24>
 8000ed8:	bd38      	pop	{r3, r4, r5, pc}
 8000eda:	0799      	lsls	r1, r3, #30
 8000edc:	bf58      	it	pl
 8000ede:	6962      	ldrpl	r2, [r4, #20]
 8000ee0:	60a2      	str	r2, [r4, #8]
 8000ee2:	e7f4      	b.n	8000ece <__swsetup_r+0x8e>
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	e7f7      	b.n	8000ed8 <__swsetup_r+0x98>
 8000ee8:	2000000c 	.word	0x2000000c

08000eec <memset>:
 8000eec:	4402      	add	r2, r0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d100      	bne.n	8000ef6 <memset+0xa>
 8000ef4:	4770      	bx	lr
 8000ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8000efa:	e7f9      	b.n	8000ef0 <memset+0x4>

08000efc <_close_r>:
 8000efc:	b538      	push	{r3, r4, r5, lr}
 8000efe:	4d06      	ldr	r5, [pc, #24]	@ (8000f18 <_close_r+0x1c>)
 8000f00:	2300      	movs	r3, #0
 8000f02:	4604      	mov	r4, r0
 8000f04:	4608      	mov	r0, r1
 8000f06:	602b      	str	r3, [r5, #0]
 8000f08:	f7ff fd67 	bl	80009da <_close>
 8000f0c:	1c43      	adds	r3, r0, #1
 8000f0e:	d102      	bne.n	8000f16 <_close_r+0x1a>
 8000f10:	682b      	ldr	r3, [r5, #0]
 8000f12:	b103      	cbz	r3, 8000f16 <_close_r+0x1a>
 8000f14:	6023      	str	r3, [r4, #0]
 8000f16:	bd38      	pop	{r3, r4, r5, pc}
 8000f18:	200001b8 	.word	0x200001b8

08000f1c <_lseek_r>:
 8000f1c:	b538      	push	{r3, r4, r5, lr}
 8000f1e:	4d07      	ldr	r5, [pc, #28]	@ (8000f3c <_lseek_r+0x20>)
 8000f20:	4604      	mov	r4, r0
 8000f22:	4608      	mov	r0, r1
 8000f24:	4611      	mov	r1, r2
 8000f26:	2200      	movs	r2, #0
 8000f28:	602a      	str	r2, [r5, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	f7ff fd79 	bl	8000a22 <_lseek>
 8000f30:	1c43      	adds	r3, r0, #1
 8000f32:	d102      	bne.n	8000f3a <_lseek_r+0x1e>
 8000f34:	682b      	ldr	r3, [r5, #0]
 8000f36:	b103      	cbz	r3, 8000f3a <_lseek_r+0x1e>
 8000f38:	6023      	str	r3, [r4, #0]
 8000f3a:	bd38      	pop	{r3, r4, r5, pc}
 8000f3c:	200001b8 	.word	0x200001b8

08000f40 <_read_r>:
 8000f40:	b538      	push	{r3, r4, r5, lr}
 8000f42:	4d07      	ldr	r5, [pc, #28]	@ (8000f60 <_read_r+0x20>)
 8000f44:	4604      	mov	r4, r0
 8000f46:	4608      	mov	r0, r1
 8000f48:	4611      	mov	r1, r2
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	602a      	str	r2, [r5, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	f7ff fd0a 	bl	8000968 <_read>
 8000f54:	1c43      	adds	r3, r0, #1
 8000f56:	d102      	bne.n	8000f5e <_read_r+0x1e>
 8000f58:	682b      	ldr	r3, [r5, #0]
 8000f5a:	b103      	cbz	r3, 8000f5e <_read_r+0x1e>
 8000f5c:	6023      	str	r3, [r4, #0]
 8000f5e:	bd38      	pop	{r3, r4, r5, pc}
 8000f60:	200001b8 	.word	0x200001b8

08000f64 <_write_r>:
 8000f64:	b538      	push	{r3, r4, r5, lr}
 8000f66:	4d07      	ldr	r5, [pc, #28]	@ (8000f84 <_write_r+0x20>)
 8000f68:	4604      	mov	r4, r0
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	2200      	movs	r2, #0
 8000f70:	602a      	str	r2, [r5, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	f7ff fd15 	bl	80009a2 <_write>
 8000f78:	1c43      	adds	r3, r0, #1
 8000f7a:	d102      	bne.n	8000f82 <_write_r+0x1e>
 8000f7c:	682b      	ldr	r3, [r5, #0]
 8000f7e:	b103      	cbz	r3, 8000f82 <_write_r+0x1e>
 8000f80:	6023      	str	r3, [r4, #0]
 8000f82:	bd38      	pop	{r3, r4, r5, pc}
 8000f84:	200001b8 	.word	0x200001b8

08000f88 <__errno>:
 8000f88:	4b01      	ldr	r3, [pc, #4]	@ (8000f90 <__errno+0x8>)
 8000f8a:	6818      	ldr	r0, [r3, #0]
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	2000000c 	.word	0x2000000c

08000f94 <__libc_init_array>:
 8000f94:	b570      	push	{r4, r5, r6, lr}
 8000f96:	4d0d      	ldr	r5, [pc, #52]	@ (8000fcc <__libc_init_array+0x38>)
 8000f98:	4c0d      	ldr	r4, [pc, #52]	@ (8000fd0 <__libc_init_array+0x3c>)
 8000f9a:	1b64      	subs	r4, r4, r5
 8000f9c:	10a4      	asrs	r4, r4, #2
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	42a6      	cmp	r6, r4
 8000fa2:	d109      	bne.n	8000fb8 <__libc_init_array+0x24>
 8000fa4:	4d0b      	ldr	r5, [pc, #44]	@ (8000fd4 <__libc_init_array+0x40>)
 8000fa6:	4c0c      	ldr	r4, [pc, #48]	@ (8000fd8 <__libc_init_array+0x44>)
 8000fa8:	f000 fa50 	bl	800144c <_init>
 8000fac:	1b64      	subs	r4, r4, r5
 8000fae:	10a4      	asrs	r4, r4, #2
 8000fb0:	2600      	movs	r6, #0
 8000fb2:	42a6      	cmp	r6, r4
 8000fb4:	d105      	bne.n	8000fc2 <__libc_init_array+0x2e>
 8000fb6:	bd70      	pop	{r4, r5, r6, pc}
 8000fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fbc:	4798      	blx	r3
 8000fbe:	3601      	adds	r6, #1
 8000fc0:	e7ee      	b.n	8000fa0 <__libc_init_array+0xc>
 8000fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fc6:	4798      	blx	r3
 8000fc8:	3601      	adds	r6, #1
 8000fca:	e7f2      	b.n	8000fb2 <__libc_init_array+0x1e>
 8000fcc:	08001484 	.word	0x08001484
 8000fd0:	08001484 	.word	0x08001484
 8000fd4:	08001484 	.word	0x08001484
 8000fd8:	08001488 	.word	0x08001488

08000fdc <__retarget_lock_init_recursive>:
 8000fdc:	4770      	bx	lr

08000fde <__retarget_lock_acquire_recursive>:
 8000fde:	4770      	bx	lr

08000fe0 <__retarget_lock_release_recursive>:
 8000fe0:	4770      	bx	lr
	...

08000fe4 <_free_r>:
 8000fe4:	b538      	push	{r3, r4, r5, lr}
 8000fe6:	4605      	mov	r5, r0
 8000fe8:	2900      	cmp	r1, #0
 8000fea:	d041      	beq.n	8001070 <_free_r+0x8c>
 8000fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ff0:	1f0c      	subs	r4, r1, #4
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	bfb8      	it	lt
 8000ff6:	18e4      	addlt	r4, r4, r3
 8000ff8:	f000 f8e0 	bl	80011bc <__malloc_lock>
 8000ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8001074 <_free_r+0x90>)
 8000ffe:	6813      	ldr	r3, [r2, #0]
 8001000:	b933      	cbnz	r3, 8001010 <_free_r+0x2c>
 8001002:	6063      	str	r3, [r4, #4]
 8001004:	6014      	str	r4, [r2, #0]
 8001006:	4628      	mov	r0, r5
 8001008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800100c:	f000 b8dc 	b.w	80011c8 <__malloc_unlock>
 8001010:	42a3      	cmp	r3, r4
 8001012:	d908      	bls.n	8001026 <_free_r+0x42>
 8001014:	6820      	ldr	r0, [r4, #0]
 8001016:	1821      	adds	r1, r4, r0
 8001018:	428b      	cmp	r3, r1
 800101a:	bf01      	itttt	eq
 800101c:	6819      	ldreq	r1, [r3, #0]
 800101e:	685b      	ldreq	r3, [r3, #4]
 8001020:	1809      	addeq	r1, r1, r0
 8001022:	6021      	streq	r1, [r4, #0]
 8001024:	e7ed      	b.n	8001002 <_free_r+0x1e>
 8001026:	461a      	mov	r2, r3
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	b10b      	cbz	r3, 8001030 <_free_r+0x4c>
 800102c:	42a3      	cmp	r3, r4
 800102e:	d9fa      	bls.n	8001026 <_free_r+0x42>
 8001030:	6811      	ldr	r1, [r2, #0]
 8001032:	1850      	adds	r0, r2, r1
 8001034:	42a0      	cmp	r0, r4
 8001036:	d10b      	bne.n	8001050 <_free_r+0x6c>
 8001038:	6820      	ldr	r0, [r4, #0]
 800103a:	4401      	add	r1, r0
 800103c:	1850      	adds	r0, r2, r1
 800103e:	4283      	cmp	r3, r0
 8001040:	6011      	str	r1, [r2, #0]
 8001042:	d1e0      	bne.n	8001006 <_free_r+0x22>
 8001044:	6818      	ldr	r0, [r3, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	6053      	str	r3, [r2, #4]
 800104a:	4408      	add	r0, r1
 800104c:	6010      	str	r0, [r2, #0]
 800104e:	e7da      	b.n	8001006 <_free_r+0x22>
 8001050:	d902      	bls.n	8001058 <_free_r+0x74>
 8001052:	230c      	movs	r3, #12
 8001054:	602b      	str	r3, [r5, #0]
 8001056:	e7d6      	b.n	8001006 <_free_r+0x22>
 8001058:	6820      	ldr	r0, [r4, #0]
 800105a:	1821      	adds	r1, r4, r0
 800105c:	428b      	cmp	r3, r1
 800105e:	bf04      	itt	eq
 8001060:	6819      	ldreq	r1, [r3, #0]
 8001062:	685b      	ldreq	r3, [r3, #4]
 8001064:	6063      	str	r3, [r4, #4]
 8001066:	bf04      	itt	eq
 8001068:	1809      	addeq	r1, r1, r0
 800106a:	6021      	streq	r1, [r4, #0]
 800106c:	6054      	str	r4, [r2, #4]
 800106e:	e7ca      	b.n	8001006 <_free_r+0x22>
 8001070:	bd38      	pop	{r3, r4, r5, pc}
 8001072:	bf00      	nop
 8001074:	200001c4 	.word	0x200001c4

08001078 <sbrk_aligned>:
 8001078:	b570      	push	{r4, r5, r6, lr}
 800107a:	4e0f      	ldr	r6, [pc, #60]	@ (80010b8 <sbrk_aligned+0x40>)
 800107c:	460c      	mov	r4, r1
 800107e:	6831      	ldr	r1, [r6, #0]
 8001080:	4605      	mov	r5, r0
 8001082:	b911      	cbnz	r1, 800108a <sbrk_aligned+0x12>
 8001084:	f000 f9d2 	bl	800142c <_sbrk_r>
 8001088:	6030      	str	r0, [r6, #0]
 800108a:	4621      	mov	r1, r4
 800108c:	4628      	mov	r0, r5
 800108e:	f000 f9cd 	bl	800142c <_sbrk_r>
 8001092:	1c43      	adds	r3, r0, #1
 8001094:	d103      	bne.n	800109e <sbrk_aligned+0x26>
 8001096:	f04f 34ff 	mov.w	r4, #4294967295
 800109a:	4620      	mov	r0, r4
 800109c:	bd70      	pop	{r4, r5, r6, pc}
 800109e:	1cc4      	adds	r4, r0, #3
 80010a0:	f024 0403 	bic.w	r4, r4, #3
 80010a4:	42a0      	cmp	r0, r4
 80010a6:	d0f8      	beq.n	800109a <sbrk_aligned+0x22>
 80010a8:	1a21      	subs	r1, r4, r0
 80010aa:	4628      	mov	r0, r5
 80010ac:	f000 f9be 	bl	800142c <_sbrk_r>
 80010b0:	3001      	adds	r0, #1
 80010b2:	d1f2      	bne.n	800109a <sbrk_aligned+0x22>
 80010b4:	e7ef      	b.n	8001096 <sbrk_aligned+0x1e>
 80010b6:	bf00      	nop
 80010b8:	200001c0 	.word	0x200001c0

080010bc <_malloc_r>:
 80010bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80010c0:	1ccd      	adds	r5, r1, #3
 80010c2:	f025 0503 	bic.w	r5, r5, #3
 80010c6:	3508      	adds	r5, #8
 80010c8:	2d0c      	cmp	r5, #12
 80010ca:	bf38      	it	cc
 80010cc:	250c      	movcc	r5, #12
 80010ce:	2d00      	cmp	r5, #0
 80010d0:	4606      	mov	r6, r0
 80010d2:	db01      	blt.n	80010d8 <_malloc_r+0x1c>
 80010d4:	42a9      	cmp	r1, r5
 80010d6:	d904      	bls.n	80010e2 <_malloc_r+0x26>
 80010d8:	230c      	movs	r3, #12
 80010da:	6033      	str	r3, [r6, #0]
 80010dc:	2000      	movs	r0, #0
 80010de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80010e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80011b8 <_malloc_r+0xfc>
 80010e6:	f000 f869 	bl	80011bc <__malloc_lock>
 80010ea:	f8d8 3000 	ldr.w	r3, [r8]
 80010ee:	461c      	mov	r4, r3
 80010f0:	bb44      	cbnz	r4, 8001144 <_malloc_r+0x88>
 80010f2:	4629      	mov	r1, r5
 80010f4:	4630      	mov	r0, r6
 80010f6:	f7ff ffbf 	bl	8001078 <sbrk_aligned>
 80010fa:	1c43      	adds	r3, r0, #1
 80010fc:	4604      	mov	r4, r0
 80010fe:	d158      	bne.n	80011b2 <_malloc_r+0xf6>
 8001100:	f8d8 4000 	ldr.w	r4, [r8]
 8001104:	4627      	mov	r7, r4
 8001106:	2f00      	cmp	r7, #0
 8001108:	d143      	bne.n	8001192 <_malloc_r+0xd6>
 800110a:	2c00      	cmp	r4, #0
 800110c:	d04b      	beq.n	80011a6 <_malloc_r+0xea>
 800110e:	6823      	ldr	r3, [r4, #0]
 8001110:	4639      	mov	r1, r7
 8001112:	4630      	mov	r0, r6
 8001114:	eb04 0903 	add.w	r9, r4, r3
 8001118:	f000 f988 	bl	800142c <_sbrk_r>
 800111c:	4581      	cmp	r9, r0
 800111e:	d142      	bne.n	80011a6 <_malloc_r+0xea>
 8001120:	6821      	ldr	r1, [r4, #0]
 8001122:	1a6d      	subs	r5, r5, r1
 8001124:	4629      	mov	r1, r5
 8001126:	4630      	mov	r0, r6
 8001128:	f7ff ffa6 	bl	8001078 <sbrk_aligned>
 800112c:	3001      	adds	r0, #1
 800112e:	d03a      	beq.n	80011a6 <_malloc_r+0xea>
 8001130:	6823      	ldr	r3, [r4, #0]
 8001132:	442b      	add	r3, r5
 8001134:	6023      	str	r3, [r4, #0]
 8001136:	f8d8 3000 	ldr.w	r3, [r8]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	bb62      	cbnz	r2, 8001198 <_malloc_r+0xdc>
 800113e:	f8c8 7000 	str.w	r7, [r8]
 8001142:	e00f      	b.n	8001164 <_malloc_r+0xa8>
 8001144:	6822      	ldr	r2, [r4, #0]
 8001146:	1b52      	subs	r2, r2, r5
 8001148:	d420      	bmi.n	800118c <_malloc_r+0xd0>
 800114a:	2a0b      	cmp	r2, #11
 800114c:	d917      	bls.n	800117e <_malloc_r+0xc2>
 800114e:	1961      	adds	r1, r4, r5
 8001150:	42a3      	cmp	r3, r4
 8001152:	6025      	str	r5, [r4, #0]
 8001154:	bf18      	it	ne
 8001156:	6059      	strne	r1, [r3, #4]
 8001158:	6863      	ldr	r3, [r4, #4]
 800115a:	bf08      	it	eq
 800115c:	f8c8 1000 	streq.w	r1, [r8]
 8001160:	5162      	str	r2, [r4, r5]
 8001162:	604b      	str	r3, [r1, #4]
 8001164:	4630      	mov	r0, r6
 8001166:	f000 f82f 	bl	80011c8 <__malloc_unlock>
 800116a:	f104 000b 	add.w	r0, r4, #11
 800116e:	1d23      	adds	r3, r4, #4
 8001170:	f020 0007 	bic.w	r0, r0, #7
 8001174:	1ac2      	subs	r2, r0, r3
 8001176:	bf1c      	itt	ne
 8001178:	1a1b      	subne	r3, r3, r0
 800117a:	50a3      	strne	r3, [r4, r2]
 800117c:	e7af      	b.n	80010de <_malloc_r+0x22>
 800117e:	6862      	ldr	r2, [r4, #4]
 8001180:	42a3      	cmp	r3, r4
 8001182:	bf0c      	ite	eq
 8001184:	f8c8 2000 	streq.w	r2, [r8]
 8001188:	605a      	strne	r2, [r3, #4]
 800118a:	e7eb      	b.n	8001164 <_malloc_r+0xa8>
 800118c:	4623      	mov	r3, r4
 800118e:	6864      	ldr	r4, [r4, #4]
 8001190:	e7ae      	b.n	80010f0 <_malloc_r+0x34>
 8001192:	463c      	mov	r4, r7
 8001194:	687f      	ldr	r7, [r7, #4]
 8001196:	e7b6      	b.n	8001106 <_malloc_r+0x4a>
 8001198:	461a      	mov	r2, r3
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	42a3      	cmp	r3, r4
 800119e:	d1fb      	bne.n	8001198 <_malloc_r+0xdc>
 80011a0:	2300      	movs	r3, #0
 80011a2:	6053      	str	r3, [r2, #4]
 80011a4:	e7de      	b.n	8001164 <_malloc_r+0xa8>
 80011a6:	230c      	movs	r3, #12
 80011a8:	6033      	str	r3, [r6, #0]
 80011aa:	4630      	mov	r0, r6
 80011ac:	f000 f80c 	bl	80011c8 <__malloc_unlock>
 80011b0:	e794      	b.n	80010dc <_malloc_r+0x20>
 80011b2:	6005      	str	r5, [r0, #0]
 80011b4:	e7d6      	b.n	8001164 <_malloc_r+0xa8>
 80011b6:	bf00      	nop
 80011b8:	200001c4 	.word	0x200001c4

080011bc <__malloc_lock>:
 80011bc:	4801      	ldr	r0, [pc, #4]	@ (80011c4 <__malloc_lock+0x8>)
 80011be:	f7ff bf0e 	b.w	8000fde <__retarget_lock_acquire_recursive>
 80011c2:	bf00      	nop
 80011c4:	200001bc 	.word	0x200001bc

080011c8 <__malloc_unlock>:
 80011c8:	4801      	ldr	r0, [pc, #4]	@ (80011d0 <__malloc_unlock+0x8>)
 80011ca:	f7ff bf09 	b.w	8000fe0 <__retarget_lock_release_recursive>
 80011ce:	bf00      	nop
 80011d0:	200001bc 	.word	0x200001bc

080011d4 <__sflush_r>:
 80011d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80011d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011da:	0716      	lsls	r6, r2, #28
 80011dc:	4605      	mov	r5, r0
 80011de:	460c      	mov	r4, r1
 80011e0:	d454      	bmi.n	800128c <__sflush_r+0xb8>
 80011e2:	684b      	ldr	r3, [r1, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	dc02      	bgt.n	80011ee <__sflush_r+0x1a>
 80011e8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	dd48      	ble.n	8001280 <__sflush_r+0xac>
 80011ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80011f0:	2e00      	cmp	r6, #0
 80011f2:	d045      	beq.n	8001280 <__sflush_r+0xac>
 80011f4:	2300      	movs	r3, #0
 80011f6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80011fa:	682f      	ldr	r7, [r5, #0]
 80011fc:	6a21      	ldr	r1, [r4, #32]
 80011fe:	602b      	str	r3, [r5, #0]
 8001200:	d030      	beq.n	8001264 <__sflush_r+0x90>
 8001202:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001204:	89a3      	ldrh	r3, [r4, #12]
 8001206:	0759      	lsls	r1, r3, #29
 8001208:	d505      	bpl.n	8001216 <__sflush_r+0x42>
 800120a:	6863      	ldr	r3, [r4, #4]
 800120c:	1ad2      	subs	r2, r2, r3
 800120e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001210:	b10b      	cbz	r3, 8001216 <__sflush_r+0x42>
 8001212:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001214:	1ad2      	subs	r2, r2, r3
 8001216:	2300      	movs	r3, #0
 8001218:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800121a:	6a21      	ldr	r1, [r4, #32]
 800121c:	4628      	mov	r0, r5
 800121e:	47b0      	blx	r6
 8001220:	1c43      	adds	r3, r0, #1
 8001222:	89a3      	ldrh	r3, [r4, #12]
 8001224:	d106      	bne.n	8001234 <__sflush_r+0x60>
 8001226:	6829      	ldr	r1, [r5, #0]
 8001228:	291d      	cmp	r1, #29
 800122a:	d82b      	bhi.n	8001284 <__sflush_r+0xb0>
 800122c:	4a28      	ldr	r2, [pc, #160]	@ (80012d0 <__sflush_r+0xfc>)
 800122e:	410a      	asrs	r2, r1
 8001230:	07d6      	lsls	r6, r2, #31
 8001232:	d427      	bmi.n	8001284 <__sflush_r+0xb0>
 8001234:	2200      	movs	r2, #0
 8001236:	6062      	str	r2, [r4, #4]
 8001238:	04d9      	lsls	r1, r3, #19
 800123a:	6922      	ldr	r2, [r4, #16]
 800123c:	6022      	str	r2, [r4, #0]
 800123e:	d504      	bpl.n	800124a <__sflush_r+0x76>
 8001240:	1c42      	adds	r2, r0, #1
 8001242:	d101      	bne.n	8001248 <__sflush_r+0x74>
 8001244:	682b      	ldr	r3, [r5, #0]
 8001246:	b903      	cbnz	r3, 800124a <__sflush_r+0x76>
 8001248:	6560      	str	r0, [r4, #84]	@ 0x54
 800124a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800124c:	602f      	str	r7, [r5, #0]
 800124e:	b1b9      	cbz	r1, 8001280 <__sflush_r+0xac>
 8001250:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001254:	4299      	cmp	r1, r3
 8001256:	d002      	beq.n	800125e <__sflush_r+0x8a>
 8001258:	4628      	mov	r0, r5
 800125a:	f7ff fec3 	bl	8000fe4 <_free_r>
 800125e:	2300      	movs	r3, #0
 8001260:	6363      	str	r3, [r4, #52]	@ 0x34
 8001262:	e00d      	b.n	8001280 <__sflush_r+0xac>
 8001264:	2301      	movs	r3, #1
 8001266:	4628      	mov	r0, r5
 8001268:	47b0      	blx	r6
 800126a:	4602      	mov	r2, r0
 800126c:	1c50      	adds	r0, r2, #1
 800126e:	d1c9      	bne.n	8001204 <__sflush_r+0x30>
 8001270:	682b      	ldr	r3, [r5, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0c6      	beq.n	8001204 <__sflush_r+0x30>
 8001276:	2b1d      	cmp	r3, #29
 8001278:	d001      	beq.n	800127e <__sflush_r+0xaa>
 800127a:	2b16      	cmp	r3, #22
 800127c:	d11d      	bne.n	80012ba <__sflush_r+0xe6>
 800127e:	602f      	str	r7, [r5, #0]
 8001280:	2000      	movs	r0, #0
 8001282:	e021      	b.n	80012c8 <__sflush_r+0xf4>
 8001284:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001288:	b21b      	sxth	r3, r3
 800128a:	e01a      	b.n	80012c2 <__sflush_r+0xee>
 800128c:	690f      	ldr	r7, [r1, #16]
 800128e:	2f00      	cmp	r7, #0
 8001290:	d0f6      	beq.n	8001280 <__sflush_r+0xac>
 8001292:	0793      	lsls	r3, r2, #30
 8001294:	680e      	ldr	r6, [r1, #0]
 8001296:	bf08      	it	eq
 8001298:	694b      	ldreq	r3, [r1, #20]
 800129a:	600f      	str	r7, [r1, #0]
 800129c:	bf18      	it	ne
 800129e:	2300      	movne	r3, #0
 80012a0:	1bf6      	subs	r6, r6, r7
 80012a2:	608b      	str	r3, [r1, #8]
 80012a4:	2e00      	cmp	r6, #0
 80012a6:	ddeb      	ble.n	8001280 <__sflush_r+0xac>
 80012a8:	6a21      	ldr	r1, [r4, #32]
 80012aa:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80012ae:	4633      	mov	r3, r6
 80012b0:	463a      	mov	r2, r7
 80012b2:	4628      	mov	r0, r5
 80012b4:	47e0      	blx	ip
 80012b6:	2800      	cmp	r0, #0
 80012b8:	dc07      	bgt.n	80012ca <__sflush_r+0xf6>
 80012ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012c2:	81a3      	strh	r3, [r4, #12]
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012ca:	4407      	add	r7, r0
 80012cc:	1a36      	subs	r6, r6, r0
 80012ce:	e7e9      	b.n	80012a4 <__sflush_r+0xd0>
 80012d0:	dfbffffe 	.word	0xdfbffffe

080012d4 <_fflush_r>:
 80012d4:	b538      	push	{r3, r4, r5, lr}
 80012d6:	690b      	ldr	r3, [r1, #16]
 80012d8:	4605      	mov	r5, r0
 80012da:	460c      	mov	r4, r1
 80012dc:	b913      	cbnz	r3, 80012e4 <_fflush_r+0x10>
 80012de:	2500      	movs	r5, #0
 80012e0:	4628      	mov	r0, r5
 80012e2:	bd38      	pop	{r3, r4, r5, pc}
 80012e4:	b118      	cbz	r0, 80012ee <_fflush_r+0x1a>
 80012e6:	6a03      	ldr	r3, [r0, #32]
 80012e8:	b90b      	cbnz	r3, 80012ee <_fflush_r+0x1a>
 80012ea:	f7ff fc93 	bl	8000c14 <__sinit>
 80012ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0f3      	beq.n	80012de <_fflush_r+0xa>
 80012f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80012f8:	07d0      	lsls	r0, r2, #31
 80012fa:	d404      	bmi.n	8001306 <_fflush_r+0x32>
 80012fc:	0599      	lsls	r1, r3, #22
 80012fe:	d402      	bmi.n	8001306 <_fflush_r+0x32>
 8001300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001302:	f7ff fe6c 	bl	8000fde <__retarget_lock_acquire_recursive>
 8001306:	4628      	mov	r0, r5
 8001308:	4621      	mov	r1, r4
 800130a:	f7ff ff63 	bl	80011d4 <__sflush_r>
 800130e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001310:	07da      	lsls	r2, r3, #31
 8001312:	4605      	mov	r5, r0
 8001314:	d4e4      	bmi.n	80012e0 <_fflush_r+0xc>
 8001316:	89a3      	ldrh	r3, [r4, #12]
 8001318:	059b      	lsls	r3, r3, #22
 800131a:	d4e1      	bmi.n	80012e0 <_fflush_r+0xc>
 800131c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800131e:	f7ff fe5f 	bl	8000fe0 <__retarget_lock_release_recursive>
 8001322:	e7dd      	b.n	80012e0 <_fflush_r+0xc>

08001324 <__swhatbuf_r>:
 8001324:	b570      	push	{r4, r5, r6, lr}
 8001326:	460c      	mov	r4, r1
 8001328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800132c:	2900      	cmp	r1, #0
 800132e:	b096      	sub	sp, #88	@ 0x58
 8001330:	4615      	mov	r5, r2
 8001332:	461e      	mov	r6, r3
 8001334:	da0d      	bge.n	8001352 <__swhatbuf_r+0x2e>
 8001336:	89a3      	ldrh	r3, [r4, #12]
 8001338:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800133c:	f04f 0100 	mov.w	r1, #0
 8001340:	bf14      	ite	ne
 8001342:	2340      	movne	r3, #64	@ 0x40
 8001344:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001348:	2000      	movs	r0, #0
 800134a:	6031      	str	r1, [r6, #0]
 800134c:	602b      	str	r3, [r5, #0]
 800134e:	b016      	add	sp, #88	@ 0x58
 8001350:	bd70      	pop	{r4, r5, r6, pc}
 8001352:	466a      	mov	r2, sp
 8001354:	f000 f848 	bl	80013e8 <_fstat_r>
 8001358:	2800      	cmp	r0, #0
 800135a:	dbec      	blt.n	8001336 <__swhatbuf_r+0x12>
 800135c:	9901      	ldr	r1, [sp, #4]
 800135e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001362:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001366:	4259      	negs	r1, r3
 8001368:	4159      	adcs	r1, r3
 800136a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800136e:	e7eb      	b.n	8001348 <__swhatbuf_r+0x24>

08001370 <__smakebuf_r>:
 8001370:	898b      	ldrh	r3, [r1, #12]
 8001372:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001374:	079d      	lsls	r5, r3, #30
 8001376:	4606      	mov	r6, r0
 8001378:	460c      	mov	r4, r1
 800137a:	d507      	bpl.n	800138c <__smakebuf_r+0x1c>
 800137c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001380:	6023      	str	r3, [r4, #0]
 8001382:	6123      	str	r3, [r4, #16]
 8001384:	2301      	movs	r3, #1
 8001386:	6163      	str	r3, [r4, #20]
 8001388:	b003      	add	sp, #12
 800138a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800138c:	ab01      	add	r3, sp, #4
 800138e:	466a      	mov	r2, sp
 8001390:	f7ff ffc8 	bl	8001324 <__swhatbuf_r>
 8001394:	9f00      	ldr	r7, [sp, #0]
 8001396:	4605      	mov	r5, r0
 8001398:	4639      	mov	r1, r7
 800139a:	4630      	mov	r0, r6
 800139c:	f7ff fe8e 	bl	80010bc <_malloc_r>
 80013a0:	b948      	cbnz	r0, 80013b6 <__smakebuf_r+0x46>
 80013a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013a6:	059a      	lsls	r2, r3, #22
 80013a8:	d4ee      	bmi.n	8001388 <__smakebuf_r+0x18>
 80013aa:	f023 0303 	bic.w	r3, r3, #3
 80013ae:	f043 0302 	orr.w	r3, r3, #2
 80013b2:	81a3      	strh	r3, [r4, #12]
 80013b4:	e7e2      	b.n	800137c <__smakebuf_r+0xc>
 80013b6:	89a3      	ldrh	r3, [r4, #12]
 80013b8:	6020      	str	r0, [r4, #0]
 80013ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013be:	81a3      	strh	r3, [r4, #12]
 80013c0:	9b01      	ldr	r3, [sp, #4]
 80013c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80013c6:	b15b      	cbz	r3, 80013e0 <__smakebuf_r+0x70>
 80013c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80013cc:	4630      	mov	r0, r6
 80013ce:	f000 f81d 	bl	800140c <_isatty_r>
 80013d2:	b128      	cbz	r0, 80013e0 <__smakebuf_r+0x70>
 80013d4:	89a3      	ldrh	r3, [r4, #12]
 80013d6:	f023 0303 	bic.w	r3, r3, #3
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	81a3      	strh	r3, [r4, #12]
 80013e0:	89a3      	ldrh	r3, [r4, #12]
 80013e2:	431d      	orrs	r5, r3
 80013e4:	81a5      	strh	r5, [r4, #12]
 80013e6:	e7cf      	b.n	8001388 <__smakebuf_r+0x18>

080013e8 <_fstat_r>:
 80013e8:	b538      	push	{r3, r4, r5, lr}
 80013ea:	4d07      	ldr	r5, [pc, #28]	@ (8001408 <_fstat_r+0x20>)
 80013ec:	2300      	movs	r3, #0
 80013ee:	4604      	mov	r4, r0
 80013f0:	4608      	mov	r0, r1
 80013f2:	4611      	mov	r1, r2
 80013f4:	602b      	str	r3, [r5, #0]
 80013f6:	f7ff fafb 	bl	80009f0 <_fstat>
 80013fa:	1c43      	adds	r3, r0, #1
 80013fc:	d102      	bne.n	8001404 <_fstat_r+0x1c>
 80013fe:	682b      	ldr	r3, [r5, #0]
 8001400:	b103      	cbz	r3, 8001404 <_fstat_r+0x1c>
 8001402:	6023      	str	r3, [r4, #0]
 8001404:	bd38      	pop	{r3, r4, r5, pc}
 8001406:	bf00      	nop
 8001408:	200001b8 	.word	0x200001b8

0800140c <_isatty_r>:
 800140c:	b538      	push	{r3, r4, r5, lr}
 800140e:	4d06      	ldr	r5, [pc, #24]	@ (8001428 <_isatty_r+0x1c>)
 8001410:	2300      	movs	r3, #0
 8001412:	4604      	mov	r4, r0
 8001414:	4608      	mov	r0, r1
 8001416:	602b      	str	r3, [r5, #0]
 8001418:	f7ff faf9 	bl	8000a0e <_isatty>
 800141c:	1c43      	adds	r3, r0, #1
 800141e:	d102      	bne.n	8001426 <_isatty_r+0x1a>
 8001420:	682b      	ldr	r3, [r5, #0]
 8001422:	b103      	cbz	r3, 8001426 <_isatty_r+0x1a>
 8001424:	6023      	str	r3, [r4, #0]
 8001426:	bd38      	pop	{r3, r4, r5, pc}
 8001428:	200001b8 	.word	0x200001b8

0800142c <_sbrk_r>:
 800142c:	b538      	push	{r3, r4, r5, lr}
 800142e:	4d06      	ldr	r5, [pc, #24]	@ (8001448 <_sbrk_r+0x1c>)
 8001430:	2300      	movs	r3, #0
 8001432:	4604      	mov	r4, r0
 8001434:	4608      	mov	r0, r1
 8001436:	602b      	str	r3, [r5, #0]
 8001438:	f7ff fb00 	bl	8000a3c <_sbrk>
 800143c:	1c43      	adds	r3, r0, #1
 800143e:	d102      	bne.n	8001446 <_sbrk_r+0x1a>
 8001440:	682b      	ldr	r3, [r5, #0]
 8001442:	b103      	cbz	r3, 8001446 <_sbrk_r+0x1a>
 8001444:	6023      	str	r3, [r4, #0]
 8001446:	bd38      	pop	{r3, r4, r5, pc}
 8001448:	200001b8 	.word	0x200001b8

0800144c <_init>:
 800144c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800144e:	bf00      	nop
 8001450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001452:	bc08      	pop	{r3}
 8001454:	469e      	mov	lr, r3
 8001456:	4770      	bx	lr

08001458 <_fini>:
 8001458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800145a:	bf00      	nop
 800145c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800145e:	bc08      	pop	{r3}
 8001460:	469e      	mov	lr, r3
 8001462:	4770      	bx	lr
